<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AutoHotkey在热键体验不好的地方总结</title>
    <url>/post/fuck-ahk.html</url>
    <content><![CDATA[<h2 id="最开始的想法"><a href="#最开始的想法" class="headerlink" title="最开始的想法"></a>最开始的想法</h2><ul>
<li>长按字母键打开常用应用，不影响字母输入</li>
<li>长按鼠标中键打开指定应用，不影响鼠标中键原有功能</li>
<li>双击Alt唤醒Wox，不影响Alt原有功能</li>
</ul>
<h2 id="失败后的备选方案"><a href="#失败后的备选方案" class="headerlink" title="失败后的备选方案"></a>失败后的备选方案</h2><ul>
<li>使用RShift + 字母打开常用应用</li>
<li>使用Wgesture，定义按下鼠标右键+单击鼠标左键打开指定应用（已实现）</li>
<li>使用Capslock + F发送Alt+Space，实现唤醒Wox（已实现）</li>
</ul>
<span id="more"></span> 

<h2 id="意外收获"><a href="#意外收获" class="headerlink" title="意外收获"></a>意外收获</h2><p>发现火萤酱快捷键能够设置双击Alt来唤醒，这就说明用其他语言能够完美的实现双击热键。</p>
<h2 id="无效例子1：长按字母键影响输入"><a href="#无效例子1：长按字母键影响输入" class="headerlink" title="无效例子1：长按字母键影响输入"></a>无效例子1：长按字母键影响输入</h2><p>来源：<a href="https://www.autohotkey.com/boards/viewtopic.php?f=28&t=6082">仅长按单键执行功能，不影响短按示例</a></p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="comment">;示例代码</span></span><br><span class="line"><span class="title">$t::</span></span><br><span class="line"><span class="built_in">	KeyWait,</span> t</span><br><span class="line">	If (<span class="built_in">A_TimeSinceThisHotkey</span> &gt; <span class="number">300</span>)</span><br><span class="line"><span class="built_in">		SetTimer,</span> mainp, -<span class="number">1</span></span><br><span class="line">	Else</span><br><span class="line"><span class="built_in">		SendInput,</span> % GetKeyState(<span class="string">&quot;CapsLock&quot;</span>, <span class="string">&quot;T&quot;</span>) ? <span class="string">&quot;T&quot;</span> : <span class="string">&quot;t&quot;</span></span><br><span class="line"><span class="keyword">Return</span></span><br><span class="line"></span><br><span class="line"><span class="title">mainp:</span></span><br><span class="line"><span class="built_in">	Run,</span> http://www.baidu.com</span><br><span class="line"><span class="keyword">Return</span></span><br></pre></td></tr></table></figure>

<p>从功能上我们是希望达到以下效果：</p>
<ul>
<li>当单击时，输入小写字母t，如果有大写锁定，则输入大写字母T</li>
<li>当长按时，执行打开百度的操作</li>
</ul>
<p>但实际这有许多体验很差的地方，比如：</p>
<ul>
<li>当我打字比较快的时候，输入tf，结果输入的是ft，是因为t需要等待时间处理才会输出。</li>
</ul>
<h2 id="在对以上代码改造后"><a href="#在对以上代码改造后" class="headerlink" title="在对以上代码改造后"></a>在对以上代码改造后</h2><figure class="highlight ahk"><table><tr><td class="code"><pre><span class="line"><span class="comment">;在对以上代码改造后</span></span><br><span class="line"><span class="title">$MButton::</span></span><br><span class="line"><span class="built_in">	KeyWait,</span> MButton</span><br><span class="line">	If (<span class="built_in">A_TimeSinceThisHotkey</span> &gt; <span class="number">300</span>)</span><br><span class="line"><span class="built_in">		SetTimer,</span> mainp, -<span class="number">1</span></span><br><span class="line">	Else</span><br><span class="line"><span class="built_in">		Click,</span> M</span><br><span class="line"><span class="keyword">Return</span></span><br><span class="line"></span><br><span class="line"><span class="title">mainp:</span></span><br><span class="line"><span class="built_in">	Send,</span> &#123;F3&#125;</span><br><span class="line"><span class="keyword">Return</span></span><br></pre></td></tr></table></figure>

<p>这代码不能正常工作，我希望长按中键时打开指定应用，单击时执行中键原来的功能，结果是长按鼠标中键能打开指定应用，但无法正常使用鼠标中键</p>
<h2 id="无效例子2：按键双击检测"><a href="#无效例子2：按键双击检测" class="headerlink" title="无效例子2：按键双击检测"></a>无效例子2：按键双击检测</h2><p> 来源:<a href="https://autohotkey.com/boards/viewtopic.php?t=4286">热键的次数与时长- AutoHotkey Community</a></p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="comment">;修改原来的RControl为LAlt</span></span><br><span class="line">intInterval := <span class="number">500</span> <span class="comment">; 若两次连击在这个时间间隔中，则视为双击。</span></span><br><span class="line"><span class="title">~LAlt::</span></span><br><span class="line">if (<span class="built_in">A_PriorHotkey</span> &lt;&gt; <span class="string">&quot;~LAlt&quot;</span> <span class="literal">or</span> <span class="built_in">A_TimeSincePriorHotkey</span> &gt; intInterval)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">    KeyWait,</span> LAlt</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">MsgBox,</span> 您双击了左边的 LAlt 键。</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>功能是希望双击左边的Alt执行打开，但问题是在编辑器长按Alt多选会出现鬼畜现象，影响Alt多行编辑的使用。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">;修改原来的#c为LAlt</span><br><span class="line">LAlt::</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">int</span>Count &gt; <span class="number">0</span>) ; SetTimer 已经启动，这里记录键击。</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span>Count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>Count = <span class="number">1</span></span><br><span class="line">SetTimer, KeyWinC, <span class="number">400</span> ; 在 <span class="number">400</span> 毫秒内等待更多的键击。</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">KeyWinC:</span><br><span class="line">SetTimer, KeyWinC, off</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">int</span>Count = <span class="number">1</span>) ; 此键按下了一次。</span><br><span class="line">&#123;</span><br><span class="line">    Run, m:\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">int</span>Count = <span class="number">2</span>) ; 此键按下了两次。</span><br><span class="line">&#123;</span><br><span class="line">    Run, m:\multimedia</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">int</span>Count &gt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    MsgBox, 连击了三次或更多。</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span>Count = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>运行后会使用原来的Alt功能失效，比如Alt+Tab无法使用。</p>
]]></content>
      <categories>
        <category>效率提升</category>
      </categories>
      <tags>
        <tag>AHK,Hotkey</tag>
      </tags>
  </entry>
  <entry>
    <title>CMD、Powershell、Bash终端配置走代理</title>
    <url>/post/shell-use-proxy.html</url>
    <content><![CDATA[<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">;; 设置代理(其中sock5可以设置为http，https)</span><br><span class="line"><span class="built_in">set</span> <span class="attribute">http_proxy</span>=<span class="string">&quot;sock5://127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="built_in">set</span> <span class="attribute">https_proxy</span>=<span class="string">&quot;sock5://127.0.0.1:1080&quot;</span></span><br><span class="line">;; 清除代理设置</span><br><span class="line"><span class="built_in">set</span> http_proxy=</span><br><span class="line"><span class="built_in">set</span> https_proxy=</span><br></pre></td></tr></table></figure>

<span id="more"></span> 

<h2 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NOTE: registry keys for IE 8, may vary for other versions</span></span><br><span class="line"><span class="variable">$regPath</span> = <span class="string">&#x27;HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings&#x27;</span></span><br><span class="line"><span class="comment"># 清除代理设置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clear-Proxy</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="variable">$regPath</span> <span class="literal">-Name</span> ProxyEnable <span class="literal">-Value</span> <span class="number">0</span></span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="variable">$regPath</span> <span class="literal">-Name</span> ProxyServer <span class="literal">-Value</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="variable">$regPath</span> <span class="literal">-Name</span> ProxyOverride <span class="literal">-Value</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    [<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;http_proxy&#x27;</span>, <span class="variable">$null</span>, <span class="string">&#x27;User&#x27;</span>)</span><br><span class="line">    [<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;https_proxy&#x27;</span>, <span class="variable">$null</span>, <span class="string">&#x27;User&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set-Proxy</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$proxy</span> = <span class="string">&#x27;sock5://127.0.0.1:1080&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="variable">$regPath</span> <span class="literal">-Name</span> ProxyEnable <span class="literal">-Value</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="variable">$regPath</span> <span class="literal">-Name</span> ProxyServer <span class="literal">-Value</span> <span class="variable">$proxy</span></span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="variable">$regPath</span> <span class="literal">-Name</span> ProxyOverride <span class="literal">-Value</span> <span class="string">&#x27;&lt;local&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    [<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;http_proxy&#x27;</span>, <span class="variable">$proxy</span>, <span class="string">&#x27;User&#x27;</span>)</span><br><span class="line">    [<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;https_proxy&#x27;</span>, <span class="variable">$proxy</span>, <span class="string">&#x27;User&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ALL_PROXY=<span class="string">&quot;socks5://127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>如果代理服务器需要登陆，这时可以直接把用户名和密码写进去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http_proxy=http://userName:password@proxyAddress:port</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Chrome插件推荐</title>
    <url>/post/chrome-plugin.html</url>
    <content><![CDATA[<h2 id="插件列表"><a href="#插件列表" class="headerlink" title="插件列表"></a>插件列表</h2><ul>
<li><a href="https://chromewebstore.google.com/detail/bitwarden-%E5%85%8D%E8%B4%B9%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E5%99%A8/nngceckbapebfimnlniiiahkandclblb">Bitwarden</a>：密码管理器</li>
<li><a href="https://chrome.google.com/webstore/detail/dhdgffkkebhmkfjojejmpbldmpobfkfo">Tampermonkey</a>：js脚本管理器</li>
<li><a href="https://chromewebstore.google.com/detail/cjpalhdlnbpafiamejdnhcphjbkeiagm">uBlock Origin</a>：广告过滤</li>
<li><a href="https://chromewebstore.google.com/detail/padekgcemlokbadohgkifijomclgjgif">Proxy SwitchyOmega</a> 配置http/socks5代理</li>
<li><a href="https://chromewebstore.google.com/detail/fnaicdffflnofjppbagibeoednhnbjhg">floccus bookmarks sync</a> 书签同步，实现与手机Kiwi浏览器同步</li>
<li><a href="https://chromewebstore.google.com/detail/pncfbmialoiaghdehhbnbhkkgmjanfhe">uBlacklist</a> 屏蔽谷歌内容农场</li>
<li><a href="https://chromewebstore.google.com/detail/kefjpfngnndepjbopdmoebkipbgkggaa">RSSHub</a> 查找RSS</li>
<li><a href="https://chromewebstore.google.com/detail/mpiodijhokgodhhofbcjdecpffjipkle">SingleFile</a> 将网页保存成单个HTML</li>
<li><a href="https://chromewebstore.google.com/detail/mpkodccbngfoacfalldjimigbofkhgjn">Aria2 Explorer</a> 管理远程Aria2实例</li>
<li><a href="https://chromewebstore.google.com/detail/mjdbhokoopacimoekfgkcoogikbfgngb">Trancy</a> AI双语字幕和网页沉浸翻译</li>
</ul>
<p>本文结束。</p>
<span id="more"></span> 


]]></content>
      <tags>
        <tag>效率生活</tag>
        <tag>浏览器插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Dell-3443-黑苹果-10.13.6</title>
    <url>/post/dell-3443-hackintosh.html</url>
    <content><![CDATA[<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul>
<li>2018-09-12：<ul>
<li>解决Sublime Text 3每次开机都需要输入序列号激活的问题(config.plist去掉勾选inject System ID)</li>
<li>使用Karabiner-Elements将CapsLock变为Hyperkey（定制SmartTouchPad驱动，将CapsLock修改为F10）</li>
</ul>
</li>
<li>2018-09-29：<ul>
<li>解决Parallels 虚拟机修饰键Mac与Windows使用习惯不一致问题(在SmartTouchPad驱动中设置<strong>Swap alt and windows key</strong>为No)</li>
</ul>
</li>
<li>2018-07-26：<ul>
<li>彻底删除Clover中多余的启动项：FileVault和Prebooter</li>
</ul>
</li>
<li>2018-07-23：<ul>
<li>解决Parallels使用虚拟机无法识别USB3.0问题</li>
<li>解决USB内建导致的退出多分区U盘问题</li>
</ul>
</li>
<li>2018-04-17：<ul>
<li>解决94352HMB搜索不到12，13频段问题</li>
</ul>
</li>
<li>2018-04-16：<ul>
<li>解决94352HMB的蓝牙固件上传失败问题</li>
</ul>
</li>
<li>2018-03-27：<ul>
<li>解决HDMI音频问题</li>
</ul>
</li>
</ul>
<span id="more"></span> 

<h2 id="硬件清单"><a href="#硬件清单" class="headerlink" title="硬件清单"></a>硬件清单</h2><ul>
<li>CPU: i5-5200U(Broadwell)</li>
<li>主板芯片组：9CC3笔记本芯片组</li>
<li>显示屏：LG 1080P（官方是720P屏幕，换了1080P的屏幕）</li>
<li><strong>核显: HD5500</strong></li>
<li>独显：Nvidia 820M（Optimus技术的显卡无法驱动）</li>
<li>硬盘：250G 三星850EVO SSD + 500G 机械硬盘（拆了光驱）</li>
<li><strong>声卡：ALC255</strong>+ HDMI音频</li>
<li>有线网卡：Realtek 8106E</li>
<li><strong>无线网卡：BCM94352HMB</strong>（官方的是AR9565)</li>
<li>蓝牙：20702A3（BCM94352HMB自带蓝牙4.0，支持Handoff）</li>
<li>读卡器：Realtek USB2.0 Card-Reader（可在Win10虚拟机中驱动）</li>
<li>USB接口:一个USB3.0+两个USB2.0</li>
<li>摄像头：集成摄像头</li>
<li>触控板：Symthetic</li>
</ul>
<h2 id="相关资源请到我的Github仓库下载"><a href="#相关资源请到我的Github仓库下载" class="headerlink" title="相关资源请到我的Github仓库下载"></a>相关资源请到我的<a href="https://github.com/kkzzhizhou/Dell-3443-Hackintosh">Github</a>仓库下载</h2><h2 id="Clover版本：4617"><a href="#Clover版本：4617" class="headerlink" title="Clover版本：4617"></a>Clover版本：4617</h2><h2 id="MacOS版本：High-Sierra-10-13-6"><a href="#MacOS版本：High-Sierra-10-13-6" class="headerlink" title="MacOS版本：High Sierra 10.13.6"></a>MacOS版本：High Sierra 10.13.6</h2><h2 id="ACPI-patched（补丁）使用说明"><a href="#ACPI-patched（补丁）使用说明" class="headerlink" title="ACPI/patched（补丁）使用说明"></a>ACPI/patched（补丁）使用说明</h2><ul>
<li>DSDT.aml(打过补丁的DSDT,具体说明见<strong>DSDT打补丁</strong>)</li>
<li>SSDT-HDMI-HD5500.aml（开启HDMI音频补丁）</li>
<li>安装时使用：<ul>
<li>SSDT-Disable_DGPU.aml(禁用optimus技术的独显，解决安装10.13.X时service ran for 0 second)</li>
</ul>
</li>
</ul>
<h2 id="kexts（驱动）使用说明"><a href="#kexts（驱动）使用说明" class="headerlink" title="kexts（驱动）使用说明"></a>kexts（驱动）使用说明</h2><ul>
<li>电源驱动：ACPIBatteryManager.kext<ul>
<li>电量显示</li>
</ul>
</li>
<li>无线网卡驱动：AirportBrcmFixup.kext<ul>
<li>需要在config.plist启动参数中添加brcmfx-country=#a -brcmfxbeta -lilubeta才能正常工作</li>
</ul>
</li>
<li>键盘，触摸板和鼠标驱动：ApplePS2SmartTouchPad.kext</li>
<li>蓝牙驱动：BrcmFirmwareData.kext和BrcmPatchRAM2.kext<ul>
<li>如果卡在Fail to write to pulk pipe，需要添加启动参数dart=0以及Drop掉DMAR表，这个与VT-d虚拟技术有关。</li>
</ul>
</li>
<li>Handoff和Hotspot：BT4LEContiunityFixup.kext</li>
<li>Facetime摄像头驱动：FaceTime_WebCam.kext</li>
<li>核心（必备）驱动：FakeSMC.kext和Lilu.kext</li>
<li>显卡补丁驱动：IntelGraphicsDVMTFixup.kext<ul>
<li>解决某些笔记本DVMT内存分配问题</li>
</ul>
</li>
<li>核显驱动：IntelGraphicsFixup.kext<ul>
<li>在config.plist中勾选Inject Intel，并选择注入的Platform-id为16260006</li>
</ul>
</li>
<li>有线网卡驱动：RealtekRT8100.kext</li>
<li>声卡驱动：AppleALC<ul>
<li>需要Lilu.kext</li>
<li>注入ID：3</li>
</ul>
</li>
</ul>
<h2 id="Drivers64UEFI目录文件说明"><a href="#Drivers64UEFI目录文件说明" class="headerlink" title="Drivers64UEFI目录文件说明"></a>Drivers64UEFI目录文件说明</h2><ul>
<li>APFS.efi(用于识别APFS分区)</li>
<li>OSxAptioFixDrv-64.efi(解决卡+号的问题)<h2 id="DSDT已打补丁"><a href="#DSDT已打补丁" class="headerlink" title="DSDT已打补丁"></a>DSDT已打补丁</h2></li>
<li>[igpu] Brightness fix（亮度调节补丁）</li>
<li>Fix ADBG Error(解决编译报错)</li>
<li>Fix PARSEOP_ZERO Error(aggressive)(解决编译报错)</li>
<li>IRQ Fix(修复声卡找不到的问题)</li>
<li>USB3_PRW 0x0D(instand wake)(修复睡眠问题)</li>
</ul>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h4 id="1-睡眠唤醒后，网卡延迟增高，需要断开重连电源适配器才能正常工作"><a href="#1-睡眠唤醒后，网卡延迟增高，需要断开重连电源适配器才能正常工作" class="headerlink" title="1. 睡眠唤醒后，网卡延迟增高，需要断开重连电源适配器才能正常工作"></a>1. 睡眠唤醒后，网卡延迟增高，需要断开重连电源适配器才能正常工作</h4><p>解决方法: 这个总是在10.12.X中出现，原因是当插着电源适配时睡眠时，无线网卡没有完全断电，导致唤醒后出现问题。在节能选择项取消勾选唤醒以供网络访问。<br>注：这个总是在10.13.X中不会出现。</p>
<h4 id="2-插入有线网卡时（以太网）出现自分配的IP地址"><a href="#2-插入有线网卡时（以太网）出现自分配的IP地址" class="headerlink" title="2. 插入有线网卡时（以太网）出现自分配的IP地址"></a>2. 插入有线网卡时（以太网）出现自分配的IP地址</h4><p>具体症状：</p>
<ul>
<li>开机后第一次插入正常使用</li>
<li>重新拔插出现自分配的IP地址</li>
<li>睡眠唤醒后使用以太网出现自分配的IP地址<br>原因：有线网卡驱动问题<br>解决方法：使用命令重新载入网卡驱动，需要将网卡安装在/Library/Extension下<br>sudo kextunload /System/Library/RealtekRT8100.kext<br>sudo kextload /System/Library/RealtekRT8100.kext<h4 id="3-解决开机第二屏花屏"><a href="#3-解决开机第二屏花屏" class="headerlink" title="3. 解决开机第二屏花屏"></a>3. 解决开机第二屏花屏</h4>Clover中注入EDID,教程：<a href="http://bbs.pcbeta.com/viewthread-1762479-1-1.html">http://bbs.pcbeta.com/viewthread-1762479-1-1.html</a></li>
</ul>
<h4 id="4-白果三码（不能登录imessage和facetime的问题）"><a href="#4-白果三码（不能登录imessage和facetime的问题）" class="headerlink" title="4. 白果三码（不能登录imessage和facetime的问题）"></a>4. 白果三码（不能登录imessage和facetime的问题）</h4><p>按照网上的无白果三码激活iMessage和Facetime时如果出现请联系客服代表。那就需要从身边有Mac电脑的同学或朋友提取。如果身边的朋友有Mac但不使用Mac系统，可以将<a href="https://www.firewolf.science/firewolf-os-x-pe-v7-cn/">OSX PE</a>安装到U盘，然后运行iMessage Debug提取。</p>
<h4 id="5-HDMI扩展屏幕显示模糊"><a href="#5-HDMI扩展屏幕显示模糊" class="headerlink" title="5. HDMI扩展屏幕显示模糊"></a>5. HDMI扩展屏幕显示模糊</h4><p><a href="https://www.jianshu.com/p/6274253b78d8">https://www.jianshu.com/p/6274253b78d8</a></p>
<h4 id="6-NTFS硬盘只能读取不能写入"><a href="#6-NTFS硬盘只能读取不能写入" class="headerlink" title="6. NTFS硬盘只能读取不能写入"></a>6. NTFS硬盘只能读取不能写入</h4><ul>
<li>Tuxera NTFS</li>
</ul>
<h4 id="7-如何彻底删除Clover中多余的启动项：FileVault和Prebooter"><a href="#7-如何彻底删除Clover中多余的启动项：FileVault和Prebooter" class="headerlink" title="7. 如何彻底删除Clover中多余的启动项：FileVault和Prebooter"></a>7. 如何彻底删除Clover中多余的启动项：FileVault和Prebooter</h4><p>在终端中使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看硬盘分区</span></span><br><span class="line">diskutil list</span><br><span class="line"><span class="comment"># 找到并挂载Prebooter所在的分区号，比如disk1s1</span></span><br><span class="line">diskutil mount disk1s1</span><br><span class="line"><span class="comment"># 进入/Volume/Prebooter，删除目录下的文件夹即可</span></span><br></pre></td></tr></table></figure>



<h2 id="无解"><a href="#无解" class="headerlink" title="无解"></a>无解</h2><ol>
<li>独立显卡（使用optimus技术的显卡无法驱动）</li>
<li>PowerNap</li>
</ol>
<h2 id="暂时无解"><a href="#暂时无解" class="headerlink" title="暂时无解"></a>暂时无解</h2><ol>
<li>耳机麦克风输入</li>
<li>睡眠问题</li>
</ol>
<h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul>
<li><a href="http://bbs.pcbeta.com/">远景论坛</a></li>
<li><a href="http://www.tonymacx86.com/">tonymacx86</a></li>
</ul>
]]></content>
      <tags>
        <tag>Hackintosh</tag>
        <tag>Dell-3443</tag>
      </tags>
  </entry>
  <entry>
    <title>GCP申请免费一年服务并无限续用</title>
    <url>/post/gcp-free-trial.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>2017年3月9日，Google Cloud试用由2个月变1年了。绑卡送300美刀，1年内使用。用最低配置来爬墙，每个月大约86GB流量，适用个人使用。<br>截止2019年9月23日，本人仍然在免费试用中，当然之后这个bug可能修复。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>国内银联信用卡/全球付无法注册。<br>亲测 VISA 和 腾讯运通卡 可以激活。<br>没有VISA卡 ? ！可以去淘宝看看，或者去银行办理。<br>学生可以办没有额度的VISA卡。</p>
<span id="more"></span> 
<h2 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h2><p>第一步：<a href="https://cloud.google.com/">https://cloud.google.com</a> ，地区选中国，亲测可行。</p>
<p><img src="https://blog.ziiyc.com/images/02d28da15a3f4c18e07156a8f5cfe975_MD5.png" alt="gcp-free-trial-1.png"></p>
<p>第二步：填写个人信息</p>
<p><img src="https://blog.ziiyc.com/images/69b9d0dec11fb94285765919c7f2c068_MD5.png" alt="gcp-free-trial-2.png"></p>
<p>申请成功后，会扣1美元，过一会儿会将1美元返回到信用卡。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>由于默认的防火墙限制太多，我们需要修改防火墙规则。</p>
<p>直接访问 ： <a href="https://console.cloud.google.com/networking/firewalls/list">https://console.cloud.google.com/networking/firewalls/list</a></p>
<p>或者在菜单中依次点击 【网络】–&gt;  【防火墙规则】 –&gt; 【创建防火墙规则】</p>
<p><img src="https://blog.ziiyc.com/images/aded29cbee7bd91b8c922e3b9acb9985_MD5.jpg" alt="gcp-free-trial-3.png"></p>
<h3 id="申请静态IP"><a href="#申请静态IP" class="headerlink" title="申请静态IP"></a>申请静态IP</h3><p>直接访问 ： <a href="https://console.cloud.google.com/networking/addresses/list">https://console.cloud.google.com/networking/addresses/list</a><br>或者在菜单中依次点击 【网络】–&gt;  【外部IP地址】 –&gt; 【保留静态IP】<br>区域可选亚洲东部、欧洲、美国 等地。推荐亚洲！</p>
<p><img src="https://blog.ziiyc.com/images/062e74286dd3f87f8c943abecc068d9f_MD5.png" alt="gcp-free-trial-4.png"></p>
<h2 id="创建计算引擎"><a href="#创建计算引擎" class="headerlink" title="创建计算引擎"></a>创建计算引擎</h2><p>直接访问 ： <a href="https://console.cloud.google.com/compute/instances">https://console.cloud.google.com/compute/instances</a><br>或者在菜单中依次点击 【计算引擎】–&gt;  【创建实例】</p>
<p><img src="https://blog.ziiyc.com/images/05cc01e409ec749a0860d1f64840e8ef_MD5.png" alt="gcp-free-trial-5.png"></p>
<p>注意以下配置，配置静态IP。</p>
<p><img src="https://blog.ziiyc.com/images/7216063a78f3b7241ddaa224b3430561_MD5.png" alt="gcp-free-trial-6.png"></p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><ol>
<li>点击进入“元数据”</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/f3ae20df8fd42b08ed18d6a9ef4f737b_MD5.gif" alt="gcp-free-trial-7.gif"></p>
<ol start="2">
<li>添加SSH密钥</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/4db5d6b1ed7cd3ffc5db9258423ee288_MD5.gif" alt="gcp-free-trial-8.gif"></p>
<ol start="3">
<li>启动你的软件PuttyGen，用软件生成一个Key,生成KEY的过程要不断地移动你的鼠标。<a href="https://www.freehao123.com/dl-puttygen/">PuttyGen下载</a></li>
</ol>
<p><img src="https://blog.ziiyc.com/images/df559ee437738d69ad5d455ad7bd519c_MD5.gif" alt="gcp-free-trial-9.gif"></p>
<ol start="4">
<li>生成了Key后，先点击右下方的“保存私钥”，将密钥保存在本地。</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/17625f3bc684b119374ba2e76982b607_MD5.gif" alt="gcp-free-trial-10.gif"></p>
<ol start="5">
<li>然后复制上面的公钥到元数据中，注意在公钥最后加上你的用户名，然后点击保存。（点击放大）</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/0b22c316e20cc94b4e12d19cabc118a7_MD5.gif" alt="gcp-free-trial-11.gif"></p>
<ol start="6">
<li>现在打开Putty，填入IP地址与端口,<strong>在授权中添加刚刚保存的私钥</strong>。</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/619a152d890196eea3cdf64008f3274b_MD5.gif" alt="gcp-free-trial-12.gif"></p>
<ol start="7">
<li>如果你想使用Xshell，你需要在PuttyGen中导出为另一种Key格式（OpenSSH key）</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/ecf44e749f80e890b5bf23f653f9e1e6_MD5.gif" alt="gcp-free-trial-13.gif"></p>
]]></content>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>黑苹果HD5500核显输出HDMI音频</title>
    <url>/post/hd5500-hdmi-audio.html</url>
    <content><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://blog.ziiyc.com/images/e6535531a01c5e7ed86c1f023baf2232_MD5.jpg" alt="hd5500-hdmi-audio-1.jpg"></p>
<span id="more"></span> 


<p><img src="https://blog.ziiyc.com/images/da255fd6a652c648bbf2ee886b438251_MD5.jpg" alt="hd5500-hdmi-audio-2.jpg"></p>
<h2 id="驱动原理"><a href="#驱动原理" class="headerlink" title="驱动原理"></a>驱动原理</h2><ol>
<li>注入的ID可以是16160002或者是16260006</li>
<li>在DSDT中，B0D3需要更名为HDAU,GFX0需要更名为IGPU.</li>
<li>HDAU注入的音频ID为3，hda-gfx值为onboard-2,IGPU的hda-gfx值也为onboard-2。</li>
</ol>
<h2 id="SSDT注入"><a href="#SSDT注入" class="headerlink" title="SSDT注入"></a>SSDT注入</h2><p><strong>注意：使用SSDT时，需要禁用ACPI中的change GFX0 to IGPU以及change B0D3 to HDAU,否则可能导致系统无法进入</strong><br>使用<a href="https://bitbucket.org/RehabMan/os-x-maciasl-patchmatic/downloads/">MaciASL</a>新建一个dsl文件，复制以下代码后，编译生成aml文件，放入Clover\ACPI\patched目录下。</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Intel ACPI Component Architecture</span></span><br><span class="line"><span class="comment"> * AML/ASL+ Disassembler version 20161210-64(RM)</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2000 - 2016 Intel Corporation</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Disassembling to non-symbolic legacy ASL operators</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Disassembly of iASL83XrKo.aml, Sun Apr  1 20:23:01 2018</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Original Table Header:</span></span><br><span class="line"><span class="comment"> *     Signature        &quot;SSDT&quot;</span></span><br><span class="line"><span class="comment"> *     Length           0x000001E0 (480)</span></span><br><span class="line"><span class="comment"> *     Revision         0x01</span></span><br><span class="line"><span class="comment"> *     Checksum         0xE4</span></span><br><span class="line"><span class="comment"> *     OEM ID           &quot;toleda&quot;</span></span><br><span class="line"><span class="comment"> *     OEM Table ID     &quot;am89hd55&quot;</span></span><br><span class="line"><span class="comment"> *     OEM Revision     0x00003000 (12288)</span></span><br><span class="line"><span class="comment"> *     Compiler ID      &quot;INTL&quot;</span></span><br><span class="line"><span class="comment"> *     Compiler Version 0x20161210 (538317328)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DefinitionBlock (<span class="string">&quot;&quot;</span>, <span class="string">&quot;SSDT&quot;</span>, <span class="number">1</span>, <span class="string">&quot;toleda&quot;</span>, <span class="string">&quot;am89hd55&quot;</span>, <span class="number">0</span>x00003000)</span><br><span class="line">&#123;</span><br><span class="line">    External (<span class="variable">_SB_</span>.PCI0, DeviceObj)    <span class="comment">// (from opcode)</span></span><br><span class="line">    External (<span class="variable">_SB_</span>.PCI0.B0D3.<span class="variable">_ADR</span>, UnknownObj)    <span class="comment">// (from opcode)</span></span><br><span class="line">    External (<span class="variable">_SB_</span>.PCI0.GFX0.<span class="variable">_ADR</span>, UnknownObj)    <span class="comment">// (from opcode)</span></span><br><span class="line"></span><br><span class="line">    Method (XOSI, <span class="number">1</span>, NotSerialized)</span><br><span class="line">    &#123;</span><br><span class="line">        Return (LEqual (Arg0, <span class="string">&quot;Windows 2009&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Scope (\<span class="variable">_SB</span>.PCI0)</span><br><span class="line">    &#123;</span><br><span class="line">        Device (HDAU)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Name</span> (<span class="variable">_ADR</span>, <span class="number">0</span>x00030000)  <span class="comment">// _ADR: Address</span></span><br><span class="line">            Method (<span class="variable">_INI</span>, <span class="number">0</span>, NotSerialized)  <span class="comment">// _INI: Initialize</span></span><br><span class="line">            &#123;</span><br><span class="line">                Store (Zero, \<span class="variable">_SB</span>.PCI0.B0D3.<span class="variable">_ADR</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Method (<span class="variable">_DSM</span>, <span class="number">4</span>, NotSerialized)  <span class="comment">// _DSM: Device-Specific Method</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">If</span> (LEqual (Arg2, Zero))</span><br><span class="line">                &#123;</span><br><span class="line">                    Return (Buffer (One)</span><br><span class="line">                    &#123;</span><br><span class="line">                         <span class="number">0</span>x03                                           </span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Return (Package (<span class="number">0</span>x04)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;hda-gfx&quot;</span>, </span><br><span class="line">                    Buffer (<span class="number">0</span>x0A)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;onboard-2&quot;</span></span><br><span class="line">                    &#125;, </span><br><span class="line"></span><br><span class="line">                    <span class="string">&quot;layout-id&quot;</span>, </span><br><span class="line">                    Buffer (<span class="number">0</span>x04)</span><br><span class="line">                    &#123;</span><br><span class="line">                         <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x00                         </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Name</span> (GFX0.<span class="variable">_STA</span>, Zero)  <span class="comment">// _STA: Status</span></span><br><span class="line">        Device (IGPU)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Name</span> (<span class="variable">_ADR</span>, <span class="number">0</span>x00020000)  <span class="comment">// _ADR: Address</span></span><br><span class="line">            Method (<span class="variable">_INI</span>, <span class="number">0</span>, NotSerialized)  <span class="comment">// _INI: Initialize</span></span><br><span class="line">            &#123;</span><br><span class="line">                Store (Zero, \<span class="variable">_SB</span>.PCI0.GFX0.<span class="variable">_ADR</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Method (<span class="variable">_DSM</span>, <span class="number">4</span>, NotSerialized)  <span class="comment">// _DSM: Device-Specific Method</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">If</span> (LEqual (Arg2, Zero))</span><br><span class="line">                &#123;</span><br><span class="line">                    Return (Buffer (One)</span><br><span class="line">                    &#123;</span><br><span class="line">                         <span class="number">0</span>x03                                           </span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Return (Package (<span class="number">0</span>x06)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;AAPL,ig-platform-id&quot;</span>, </span><br><span class="line">                    Buffer (<span class="number">0</span>x04)</span><br><span class="line">                    &#123;</span><br><span class="line">                         <span class="number">0</span>x06, <span class="number">0</span>x00, <span class="number">0</span>x26, <span class="number">0</span>x16                         </span><br><span class="line">                    &#125;, </span><br><span class="line"></span><br><span class="line">                    <span class="string">&quot;model&quot;</span>, </span><br><span class="line">                    Buffer (<span class="number">0</span>x17)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;Intel HD Graphics 5500&quot;</span></span><br><span class="line">                    &#125;, </span><br><span class="line"></span><br><span class="line">                    <span class="string">&quot;hda-gfx&quot;</span>, </span><br><span class="line">                    Buffer (<span class="number">0</span>x0A)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;onboard-2&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Store (<span class="string">&quot;ssdt-ami-8/9series_desktop_hd5500_hdmi_audio_v3.0 github.com/toleda&quot;</span>, Debug)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>代码中注入的ID为16260006</strong></p>
<h2 id="使用Rehabman的config-HD5300-5500-6000-plist打补丁"><a href="#使用Rehabman的config-HD5300-5500-6000-plist打补丁" class="headerlink" title="使用Rehabman的config_HD5300_5500_6000.plist打补丁"></a>使用Rehabman的<a href="https://github.com/RehabMan/OS-X-Clover-Laptop-Config">config_HD5300_5500_6000.plist</a>打补丁</h2><p>因为注入的ID为16260006，所以用Clover Configurator在Clover中的KextsToPatch应用以下补丁</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">Name:           com.apple.driver.AppleIntelBDWGraphicsFramebuffer</span><br><span class="line">Comment:        HDMI-audio, port <span class="number">0105</span>, <span class="number">0x16120003</span> <span class="number">0x16120005</span> <span class="number">0x16120006</span> <span class="number">0x16260006</span></span><br><span class="line">Find:           <span class="number">01050B00</span> <span class="number">00040000</span> <span class="number">07050000</span></span><br><span class="line">Replace:        <span class="number">01050B00</span> <span class="number">00080000</span> <span class="number">82000000</span></span><br><span class="line">InfoPlistPatch: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Name:           com.apple.driver.AppleIntelBDWGraphicsFramebuffer</span><br><span class="line">Comment:        HDMI-audio, port <span class="number">0204</span>, <span class="number">0x16120003</span> <span class="number">0x16120005</span> <span class="number">0x16120006</span> <span class="number">0x16260006</span></span><br><span class="line">Find:           <span class="number">02040B00</span> <span class="number">00040000</span> <span class="number">07050000</span></span><br><span class="line">Replace:        <span class="number">02040B00</span> <span class="number">00080000</span> <span class="number">82000000</span></span><br><span class="line">InfoPlistPatch: <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Hackintosh</tag>
        <tag>HDMI Audio</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next功能及个性化配置</title>
    <url>/post/next-config.html</url>
    <content><![CDATA[<h2 id="Travis-CI持续集成"><a href="#Travis-CI持续集成" class="headerlink" title="Travis CI持续集成"></a><a href="https://kkzzhizhou.github.io/2019/03/16/Hexo%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/">Travis CI持续集成</a></h2><span id="more"></span> 

<h2 id="RSS-Feed"><a href="#RSS-Feed" class="headerlink" title="RSS Feed"></a>RSS Feed</h2><ul>
<li><p>安装插件<code>generator-feed</code></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改站点配置</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Extensions</span></span><br><span class="line"><span class="meta">## Plugins: http:<span class="comment">//hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">#RSS订阅</span></span><br><span class="line"><span class="symbol">plugin:</span></span><br><span class="line">- generator-feed</span><br><span class="line"><span class="meta">#Feed Atom</span></span><br><span class="line"><span class="symbol">feed:</span></span><br><span class="line"><span class="symbol">type:</span> atom</span><br><span class="line"><span class="symbol">path:</span> atom.xml</span><br><span class="line"><span class="symbol">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="修改主题配置，添加如下配置"><a href="#修改主题配置，添加如下配置" class="headerlink" title="修改主题配置，添加如下配置"></a>修改主题配置，添加如下配置</h3><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">rss:</span> /atom.xml</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="站内全文搜索"><a href="#站内全文搜索" class="headerlink" title="站内全文搜索"></a>站内全文搜索</h2><ul>
<li><p>安装 <code>generator-searchdb</code>，在站点的根目录下执行以下命令：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ npm install generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li>
<li><p>编辑 站点配置文件，新增以下内容到任意位置：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></li>
<li><p>编辑 主题配置文件，启用本地搜索功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="文章按更新时间排序"><a href="#文章按更新时间排序" class="headerlink" title="文章按更新时间排序"></a>文章按更新时间排序</h2><h3 id="要修改的内容"><a href="#要修改的内容" class="headerlink" title="要修改的内容"></a>要修改的内容</h3><ul>
<li><p><code>/node_modules/generator-index/index.js</code></p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">order<span class="number">_</span><span class="meta">by</span>: <span class="string">&#x27;-date&#x27;</span></span><br></pre></td></tr></table></figure>

<p>修改为</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">order<span class="number">_</span><span class="meta">by</span>: <span class="string">&#x27;-updated&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这样的话就<strong>只</strong>按 Front-matter 中的<code>updated</code>排序了，因此所有文章的 Front-matter 中都必须要有<code>updated</code>，已发布的文章可以手动修改或者找方法批量将 <code>data</code>换成<code>updated</code>，对于将来的文章，只要做如下修改：</p>
<ul>
<li><code>/scaffolds/post.md</code></li>
</ul>
<p>在<code>date</code>后加入一行</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">updated: </span><span class="template-variable">&#123;&#123; <span class="name">date</span> &#125;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Hexo链接持久化"><a href="#Hexo链接持久化" class="headerlink" title="Hexo链接持久化"></a>Hexo链接持久化</h2><ul>
<li> 安装<code>abbrlink</code>这个插件</li>
</ul>
  <figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install abbrlink <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>站点配置文件里:</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">permalink:</span> post/:abbrlink.html</span><br><span class="line"><span class="symbol">abbrlink:</span></span><br><span class="line"><span class="symbol">  alg:</span> crc32  <span class="meta"># 算法：crc16(default) and crc32</span></span><br><span class="line"><span class="symbol">  rep:</span> hex    <span class="meta"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="赞赏"><a href="#赞赏" class="headerlink" title="赞赏"></a>赞赏</h2><ul>
<li><p>获取微信，支付宝收款二维码</p>
</li>
<li><p>找到主题 配置文件</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Rewrad</span></span><br><span class="line"><span class="symbol">reward_comment:</span> 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line"><span class="symbol">wechatpay:</span> 图片链接或图片相对路径</span><br><span class="line"><span class="symbol">alipay:</span> 图片链接或图片相对路径</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><p>Next主题使用的Fontawesome版本需要升级才能支持QQ和微信等社交图标。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Home Assistant+小度智能音箱实现远程控制家电</title>
    <url>/post/home-assistent-with-xiaodu-smart-speaker.html</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在联通营业厅更换宽带套餐时加钱买了个小度智能音箱，从一开始只是查查天气、放放歌，我现在它做得更多一些，比如说本篇教程提到的控制家里的电器。</p>
<span id="more"></span> 

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>群晖DSM使用Docker下载安装homeassistant/home-assistant</li>
<li>购买小米米家智能插座插头WiFi版</li>
</ul>
<h2 id="Home-Assistant配置步骤"><a href="#Home-Assistant配置步骤" class="headerlink" title="Home Assistant配置步骤"></a>Home Assistant配置步骤</h2><p><img src="https://blog.ziiyc.com/images/95e83d3582b3e94c21d827ed1c4b4edf_MD5.png" alt="home-assistent-with-xiaodu-smart-speaker-1.png"></p>
<p><img src="https://blog.ziiyc.com/images/2d0bc75b6142f83bf0ae18d97bb4ceb1_MD5.png" alt="home-assistent-with-xiaodu-smart-speaker-2.png"></p>
<p><img src="https://blog.ziiyc.com/images/cc068b923f150eaddae000c6b5b7bf76_MD5.png" alt="home-assistent-with-xiaodu-smart-speaker-3.png"></p>
<p><img src="https://blog.ziiyc.com/images/ac99c03619d14c813369e09205f0f8fe_MD5.png" alt="home-assistent-with-xiaodu-smart-speaker-4.png"></p>
<p><img src="https://blog.ziiyc.com/images/03996497107573645cac0a39ab019178_MD5.png" alt="home-assistent-with-xiaodu-smart-speaker-5.png"></p>
<p>应用后启动即可,配置界面连接为<a href="http://nas_ip:8123/">http://nas_ip:8123</a></p>
<h2 id="扩展：公网Https方式访问Haome-Aassistant"><a href="#扩展：公网Https方式访问Haome-Aassistant" class="headerlink" title="扩展：公网Https方式访问Haome Aassistant"></a>扩展：公网Https方式访问Haome Aassistant</h2><p>如果需要在公网中使用Home Assistant,可以使用内网穿透工具frp。Home Assistant默认监听本地8123端口,使用Websocket连接。</p>
<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> hass.domain.com; <span class="comment"># 修改domain为你自定义的域名</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span>       /etc/nginx/ssl/domain.com.key.pem; <span class="comment"># 修改domain为你自定义的域名</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>   /etc/nginx/ssl/domain.com.key; <span class="comment"># 修改domain为你自定义的域名</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host  <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:[frp_port]; <span class="comment"># 此处修改为你的frps端口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /api/websocket &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8123;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="frpc配置"><a href="#frpc配置" class="headerlink" title="frpc配置"></a>frpc配置</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[hass-ws]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8123</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">8123</span></span><br><span class="line"></span><br><span class="line"><span class="section">[hass]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8123</span></span><br><span class="line"><span class="attr">custom_domains</span> = hass.domain.com</span><br></pre></td></tr></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://post.smzdm.com/p/amm0g5qd/">哑虎的智能家居路 篇四：小度音箱接入HomeAssistant</a></li>
</ul>
<h2 id="智能家居论坛"><a href="#智能家居论坛" class="headerlink" title="智能家居论坛"></a>智能家居论坛</h2><ul>
<li><a href="https://bbs.hassbian.com/forum.php">https://bbs.hassbian.com/forum.php</a></li>
</ul>
]]></content>
      <categories>
        <category>智能家居</category>
      </categories>
      <tags>
        <tag>米家WIFI智能插座</tag>
        <tag>智能家居开源系统</tag>
        <tag>群晖DSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下清歌五笔输入法快速输入日期时间的方法</title>
    <url>/post/mac-quick-input-time.html</url>
    <content><![CDATA[<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2018-09-02：清歌五笔输入法自带快速输入日期时间的方法</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Windows平台下，用搜狗五笔输入法快速输入时间日期星期很舒服，一到Mac平台，Mac版搜狗五笔输入法却不提供同样的功能，实在是郁闷至极，最终发现了清歌五笔输入法能够快速输入时间日期（虽然不能快速输入星期），很赞。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>清歌输入法提供用户词库功能，如下图所示。</p>
<p><img src="https://blog.ziiyc.com/images/71284125d49d73aeed6258f3107b25f5_MD5.jpg" alt="mac-quick-input-time-1.jpg"></p>
<span id="more"></span> ]]></content>
      <tags>
        <tag>输入法技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Mame玩街机完全教程</title>
    <url>/post/mame-tutorial.html</url>
    <content><![CDATA[<h2 id="街机模拟器的选择"><a href="#街机模拟器的选择" class="headerlink" title="街机模拟器的选择"></a>街机模拟器的选择</h2><p>网上有很多类型的街机模拟器,如比较知名的mame及其分支（mameplus,mame plus! plus!,mame32 more等），winkawaks，fba shuffle ,nebula(星云模拟器)等等。</p>
<p>想要实现标题中所提到的所有功能，请使用<strong>mame32 more</strong>（联机对战）或者**mame plus! plus!**（两个版本集成联机对战功能）</p>
<p>我的选择：<strong>mame32 more</strong></p>
<span id="more"></span> 
<h2 id="街机模拟器下载"><a href="#街机模拟器下载" class="headerlink" title="街机模拟器下载"></a>街机模拟器下载</h2><ol>
<li><a href="https://emulationrealm.net/downloads/file/3169-mame32-more">mame32 more</a></li>
<li><a href="http://www.zophar.net/mame/mame32-plus-plus.html">mame plus! plus!</a></li>
</ol>
<h2 id="BIOS及游戏ROM下载"><a href="#BIOS及游戏ROM下载" class="headerlink" title="BIOS及游戏ROM下载"></a>BIOS及游戏ROM下载</h2><p>科普：好多游戏都需要有BIOS文件的支持才能运行，比如NEOGEO的游戏都需要neogeo.zip这个BIOS文件才能玩，如果没有，MAME是不会认NEOGEO的游戏的。<br>BIOS不需要一个一个下，直接下一个游戏合集包，在模拟器\roms目录下（可能会隐藏）。<br>游戏包：<a href="http://www.game333.net/danji/oth/329677.html">http://www.game333.net/danji/oth/329677.html</a><br>游戏ROM及BIOS下载网站：</p>
<ol>
<li><a href="http://www.doperoms.com/">http://www.doperoms.com/</a>  （这个网站收录了大部分的游戏及全部的BIOS,某些盗版的rom没有。）</li>
<li><a href="http://www.romnation.net/">http://www.romnation.net/</a> </li>
</ol>
<h2 id="联机对战（2017年4月5日更新）"><a href="#联机对战（2017年4月5日更新）" class="headerlink" title="联机对战（2017年4月5日更新）"></a>联机对战（2017年4月5日更新）</h2><p>联机对战使用到kaillera，在文件 -&gt; play kaillera game</p>
<ol>
<li>点对点模式最多支持两个人（或者说两台电脑）同时联机</li>
<li>联机模式可支持2人以上同时进行游戏，比如说恐龙新世纪3人联机，三国战纪4人联机。</li>
</ol>
<p>3人至多人联机教程，简单的就以恐龙快打为例：</p>
<ol>
<li>局域网中需要有一台电脑用<strong>KaillerasrvGUI</strong>建立服务器。</li>
<li>三台电脑此时可同时连接同一台服务器进行游戏。（一台电脑既是服务器，又是客户端。）</li>
</ol>
<p>复杂一些比如，三国战纪四人联机：</p>
<ol>
<li>四人同时连接服务器，进入游戏后。1P（选择游戏的人是1P）开启业务模式（Tab键-打开业务开关）</li>
<li>按F3重装加载游戏，马上按住1P的除方向键的第一个键（比如我常用J作为我的第一个按键，一般游戏J表示轻拳）</li>
<li>进入PGM设置，调整游戏为4人游戏。（记得是第三或者第四个设置的二级菜单里有，进去后慢慢试）</li>
<li>关闭业务打开，按退出，重新启动游戏（按F3）。注意不是退出重连。</li>
</ol>
<h2 id="作弊器"><a href="#作弊器" class="headerlink" title="作弊器"></a>作弊器</h2><p>需要下载作弊文件cheat.dat,放到模拟器根目录，并在选项-杂项中启用游戏作弊功能</p>
<h2 id="出招表"><a href="#出招表" class="headerlink" title="出招表"></a>出招表</h2><p>一般模拟器都会自带游戏出招表，在游戏过程中按住<strong>TAB</strong>调出菜单，mame32 more这款模拟器的出招表在  游戏文档-显示指令列表。而mameplus则是在第一级菜单就有。</p>
<h2 id="存档和读档"><a href="#存档和读档" class="headerlink" title="存档和读档"></a>存档和读档</h2><p>在游戏进行到任何情况下，都可以存档和读档，对于一些游戏时间长的游戏很有用。按住<strong>TAB</strong>调出菜单，在一般选项里可以设置存档和读档的快捷键。默认是按住shift+F7然后输入一个数学或者字母存档，单按F7然后输入指定数字字母的读档。</p>
]]></content>
      <tags>
        <tag>mame</tag>
        <tag>街机</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian+Hexo实现仪表盘及更新博客</title>
    <url>/post/obsidian-dashboard-publish.html</url>
    <content><![CDATA[<p>看了一篇<a href="https://blog.zhangyingwei.com/posts/2022m4d12h13m13s22/">Obsidian + Hugo 最佳配置推荐</a>文章，做了一个Obsidian+Hexo博客仪表盘，配合之前的Hexo发布脚本，基本上在仅使用Obsidian的情况下完成博客的更新发布流程。先看效果图：</p>
<p><img src="https://blog.ziiyc.com/images/lc0t1l2q.pd4.png"></p>
<p><img src="https://blog.ziiyc.com/images/uqy5wnju.cdm.png"></p>
<span id="more"></span> 
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>Obsidian插件<ul>
<li>Charts</li>
<li>Dataview</li>
<li>Homepage(可选）</li>
</ul>
</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>安装好上述插件</li>
<li>在你当前vaults下创建一个blog目录，用于管理博客的原始文件</li>
<li>使用Homepage或者创建一个空白的md文件，输入以下仪表盘代码(需要去掉开头的<code>\\</code>)</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> ```dataviewjs</span><br><span class="line">\\ let la = [&quot;未发布&quot;,&quot;已发布&quot;]</span><br><span class="line">\\ let da = []</span><br><span class="line">\\ const draftPage = dv.pages(`<span class="string">&quot;blog&quot;</span>`).filter(p =&gt; p.draft).length</span><br><span class="line">\\ const notDraftPage = dv.pages(`<span class="string">&quot;blog&quot;</span>`).filter(p =&gt; !p.draft).length</span><br><span class="line">\\ da[0] = notDraftPage</span><br><span class="line">\\ da[1] = draftPage</span><br><span class="line">\\ </span><br><span class="line">\\ </span><br><span class="line">\\ dv.paragraph(`<span class="punctuation">\</span>`\`\`chart</span><br><span class="line">\\ type: pie</span><br><span class="line">\\ labels: [&quot;未发布&quot;,&quot;已发布&quot;]</span><br><span class="line">\\ series:</span><br><span class="line">\\     - title: none</span><br><span class="line">\\       data: [$&#123;da&#125;]</span><br><span class="line">\\ width: 25%</span><br><span class="line">\\ legendPosition: left</span><br><span class="line">\\ labelColors: true</span><br><span class="line">\\ \`\`\`</span><br><span class="line">\\ `<span class="punctuation">)</span>;</span><br><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> ```</span><br><span class="line">\\ </span><br><span class="line">\\ ### 草稿箱</span><br><span class="line">\\ </span><br><span class="line">\\ ```dataview</span><br><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> table updated AS <span class="string">&quot;更新时间&quot;</span><span class="punctuation">,</span>date AS <span class="string">&quot;创建时间&quot;</span></span><br><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> from <span class="string">&quot;blog&quot;</span></span><br><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> where draft<span class="operator">=</span>true</span><br><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> sort updated desc</span><br><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> ```</span><br><span class="line">\\ ### 已发布</span><br><span class="line">\\ </span><br><span class="line">\\ ```dataview</span><br><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> table updated AS <span class="string">&quot;更新时间&quot;</span><span class="punctuation">,</span>date AS <span class="string">&quot;创建时间&quot;</span></span><br><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> from <span class="string">&quot;blog&quot;</span></span><br><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> where draft<span class="operator">=</span>false or <span class="operator">!</span>draft</span><br><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> sort updated desc</span><br><span class="line"><span class="punctuation">\</span><span class="punctuation">\</span> ```</span><br></pre></td></tr></table></figure>

<ul>
<li>配合以下的RunJS发布Hexo脚本，原理：将原文档上传到Hexo源码仓库，触发Github Actions更新博客</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RunJS</span> hexo/publish</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setting</span></span><br><span class="line"><span class="keyword">const</span> token = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> owner = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> repo = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> remote_image_path = <span class="string">&#x27;source/images&#x27;</span></span><br><span class="line"><span class="keyword">const</span> action = <span class="string">&#x27;deploy.yml&#x27;</span></span><br><span class="line"><span class="keyword">const</span> attachment_path = <span class="string">&#x27;media/image&#x27;</span></span><br><span class="line"><span class="keyword">const</span> image_map_path = <span class="string">&#x27;media/script/data/image-map.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">readJsonFile</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 使用vault的read方法读取文件内容</span></span><br><span class="line">        <span class="keyword">const</span> fileContent = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">vault</span>.<span class="title function_">read</span>(<span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">vault</span>.<span class="title function_">getAbstractFileByPath</span>(filePath));</span><br><span class="line">        <span class="comment">// 将读取到的内容解析为JSON对象</span></span><br><span class="line">        <span class="keyword">const</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fileContent);</span><br><span class="line">        <span class="comment">// console.log(jsonData);</span></span><br><span class="line">        <span class="keyword">return</span> jsonData;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error reading JSON file:&quot;</span>, error);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrayBufferToBase64</span>(<span class="params">buffer</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> binary = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> bytes = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer);</span><br><span class="line">    <span class="keyword">const</span> len = bytes.<span class="property">byteLength</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        binary += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用 btoa 函数将二进制字符串转换为 Base64 字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">btoa</span>(binary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">readImageAsDataURL</span>(<span class="params">img, fileExt</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 使用vault的readBinary方法读取二进制文件内容</span></span><br><span class="line">        <span class="keyword">const</span> fileContent = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">vault</span>.<span class="title function_">readBinary</span>(img);</span><br><span class="line">        <span class="comment">// 创建一个Blob对象</span></span><br><span class="line">        <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([fileContent], &#123; <span class="attr">type</span>: <span class="string">`image/<span class="subst">$&#123;fileExt&#125;</span>`</span> &#125;); <span class="comment">// 假设图片是PNG格式</span></span><br><span class="line">        <span class="keyword">return</span> blob</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error reading image file:&quot;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getFileSha</span>(<span class="params">owner, repo, path</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`https://api.github.com/repos/<span class="subst">$&#123;owner&#125;</span>/<span class="subst">$&#123;repo&#125;</span>/contents/<span class="subst">$&#123;path&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> requestUrlParam = &#123;</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`token <span class="subst">$&#123;token&#125;</span>`</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/vnd.github.v3+json&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">requestUrl</span>(requestUrlParam);</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span> || response.<span class="property">status</span> === <span class="number">201</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> response.<span class="property">json</span>.<span class="property">sha</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;失败&#x27;</span>, response.<span class="property">status</span>, response.<span class="property">text</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`异常: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">base64EncodeUnicode</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">btoa</span>(<span class="built_in">encodeURIComponent</span>(str).<span class="title function_">replace</span>(<span class="regexp">/%([0-9A-F]&#123;2&#125;)/g</span>, <span class="keyword">function</span> (<span class="params">match, p1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="string">&#x27;0x&#x27;</span> + p1);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateFile</span>(<span class="params">owner, repo, path, content, sha, message = <span class="string">&quot;update via Obsidian&quot;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`https://api.github.com/repos/<span class="subst">$&#123;owner&#125;</span>/<span class="subst">$&#123;repo&#125;</span>/contents/<span class="subst">$&#123;path&#125;</span>`</span>;</span><br><span class="line">    requestUrlParam = &#123;</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`token <span class="subst">$&#123;token&#125;</span>`</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/vnd.github.v3+json&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">            message,</span><br><span class="line">            <span class="attr">content</span>: content,</span><br><span class="line">            sha</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">requestUrl</span>(requestUrlParam);</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span> || response.<span class="property">status</span> === <span class="number">201</span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(response.json)</span></span><br><span class="line">            <span class="keyword">return</span> response.<span class="property">json</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;失败&#x27;</span>, response.<span class="property">status</span>, response.<span class="property">text</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Notice</span>(<span class="string">`异常: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadFileToGitHub</span>(<span class="params">owner, repo, path, content</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> sha = <span class="keyword">await</span> <span class="title function_">getFileSha</span>(owner, repo, path);</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">updateFile</span>(owner, repo, path, content, sha, <span class="string">&quot;Update via Obsidian&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件更新成功:&quot;</span>, result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;更新文件时发生错误:&quot;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isUrl</span>(<span class="params">link</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Boolean</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(link));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (_) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">triggerHexoDeploy</span>(<span class="params">owner, repo, action</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`https://api.github.com/repos/<span class="subst">$&#123;owner&#125;</span>/<span class="subst">$&#123;repo&#125;</span>/actions/workflows/<span class="subst">$&#123;action&#125;</span>/dispatches`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(url)</span><br><span class="line">    <span class="keyword">const</span> requestUrlParam = &#123;</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`token <span class="subst">$&#123;token&#125;</span>`</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">            <span class="attr">ref</span>: <span class="string">&quot;master&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">requestUrl</span>(requestUrlParam);</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">204</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发博客更新成功&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;触发博客更新失败&#x27;</span>, response.<span class="property">status</span>, response.<span class="property">text</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Notice</span>(<span class="string">`触发博客更新请求异常: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="keyword">const</span> activeFile = <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">workspace</span>.<span class="title function_">getActiveFile</span>();</span><br><span class="line"><span class="keyword">if</span> (!activeFile) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;No file is currently active.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(activeFile)</span><br><span class="line"><span class="keyword">let</span> content = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">vault</span>.<span class="title function_">read</span>(activeFile)</span><br><span class="line"><span class="keyword">let</span> image_map = <span class="keyword">await</span> <span class="title function_">readJsonFile</span>(image_map_path)</span><br><span class="line"><span class="comment">// 图片上传</span></span><br><span class="line"><span class="keyword">const</span> imageRegex = <span class="regexp">/!\[[^$].*?\]\(([^$].*?)\)|!\[\[([^$].*?)\]\]/g</span>;</span><br><span class="line"><span class="comment">// const imageRegex2 = /!\[\[(.*?)\]\]/g</span></span><br><span class="line"><span class="keyword">const</span> images = []</span><br><span class="line"><span class="keyword">let</span> match</span><br><span class="line"><span class="keyword">let</span> img</span><br><span class="line"><span class="keyword">let</span> img_name</span><br><span class="line"><span class="keyword">let</span> img_content</span><br><span class="line"><span class="keyword">while</span> ((match = imageRegex.<span class="title function_">exec</span>(content)) !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (match[<span class="number">1</span>] || match[<span class="number">2</span>]) &#123;</span><br><span class="line">        img_name = match[<span class="number">1</span>] || match[<span class="number">2</span>]</span><br><span class="line">        images.<span class="title function_">push</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img_name)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isUrl</span>(img_name)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (match[<span class="number">1</span>]) &#123;</span><br><span class="line">            img = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">vault</span>.<span class="title function_">getAbstractFileByPath</span>(img_name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            img = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">vault</span>.<span class="title function_">getAbstractFileByPath</span>(<span class="string">`<span class="subst">$&#123;attachment_path&#125;</span>/<span class="subst">$&#123;img_name&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(img)</span><br><span class="line">        <span class="keyword">if</span> (!image_map.<span class="title function_">hasOwnProperty</span>(img.<span class="property">name</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`upload: <span class="subst">$&#123;img.name&#125;</span>`</span>)</span><br><span class="line">            img_content = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">vault</span>.<span class="title function_">readBinary</span>(img);</span><br><span class="line">            img_content = <span class="title function_">arrayBufferToBase64</span>(img_content);</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">uploadFileToGitHub</span>(owner, repo, <span class="string">`<span class="subst">$&#123;remote_image_path&#125;</span>/<span class="subst">$&#123;img.name&#125;</span>`</span>, img_content)</span><br><span class="line">            image_map[img.<span class="property">name</span>] = <span class="string">`https://blog.ziiyc.com/images/<span class="subst">$&#123;img.name&#125;</span>`</span></span><br><span class="line">            <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">vault</span>.<span class="property">adapter</span>.<span class="title function_">write</span>(image_map_path, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(image_map, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (match[<span class="number">1</span>]) &#123;</span><br><span class="line">            content = content.<span class="title function_">replace</span>(img_name, image_map[img.<span class="property">name</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (match[<span class="number">2</span>]) &#123;</span><br><span class="line">            content = content.<span class="title function_">replace</span>(<span class="string">`![[<span class="subst">$&#123;img_name&#125;</span>]]`</span>, <span class="string">`![](<span class="subst">$&#123;image_map[img.name]&#125;</span>)`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">content = content.<span class="title function_">replaceAll</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line"><span class="keyword">const</span> path = <span class="string">`source/_posts/<span class="subst">$&#123;activeFile.name&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">uploadFileToGitHub</span>(owner, repo, path, <span class="title function_">base64EncodeUnicode</span>(content))</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">triggerHexoDeploy</span>(owner, repo, action)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Notice</span>(<span class="string">&quot;博客更新成功&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>OpenVPN实现内网互通</title>
    <url>/post/openvpn-connect-lan.html</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>实现公司通过SMB访问租房NAS,并且拨通OpenVPN之后，只有OpenVPN客户端之间的流量经过OpenVPN，其他流量按原来的方式。</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul>
<li>OpenVPN Server(Ubuntu)</li>
<li>OpenVPN Client(Windows、CentOS)</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li>在Ubuntu机器上安装OpenVPN, <code>curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh &amp;&amp; bash openvpn-install.sh</code></li>
<li>修改OpenVPN Server的配置文件, <code>vim /etc/openvpn/server.conf</code></li>
</ul>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">;服务端配置</span><br><span class="line">port <span class="number">1194</span></span><br><span class="line">proto tcp</span><br><span class="line">dev tun</span><br><span class="line">user nobody</span><br><span class="line">group nogroup</span><br><span class="line">persist-<span class="built_in">key</span></span><br><span class="line">persist-tun</span><br><span class="line">keepalive <span class="number">10</span> <span class="number">120</span></span><br><span class="line">topology subnet</span><br><span class="line">client-to-client # 允许客户端之间的连接</span><br><span class="line">server <span class="number">192.168</span><span class="number">.10</span><span class="number">.0</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line">dh none</span><br><span class="line">persist-<span class="built_in">key</span></span><br><span class="line">persist-tun</span><br><span class="line">ecdh-curve prime256v1</span><br><span class="line">tls-crypt tls-crypt.<span class="built_in">key</span></span><br><span class="line">crl-verify crl.pem</span><br><span class="line">ca ca.crt</span><br><span class="line">cert server_JFIAtsavKPr9oaij.crt</span><br><span class="line"><span class="built_in">key</span> server_JFIAtsavKPr9oaij.<span class="built_in">key</span></span><br><span class="line">auth SHA256</span><br><span class="line">cipher AES-<span class="number">128</span>-GCM</span><br><span class="line">ncp-ciphers AES-<span class="number">128</span>-GCM</span><br><span class="line">tls-server</span><br><span class="line">tls-version-<span class="built_in">min</span> <span class="number">1.2</span></span><br><span class="line">tls-cipher TLS-ECDHE-ECDSA-WITH-AES-<span class="number">128</span>-GCM-SHA256</span><br><span class="line">client-config-dir /etc/openvpn/ccd</span><br><span class="line"><span class="built_in">status</span> /<span class="built_in">var</span>/<span class="built_in">log</span>/openvpn/<span class="built_in">status</span>.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">log</span> /<span class="built_in">var</span>/<span class="built_in">log</span>/openvpn.<span class="built_in">log</span></span><br><span class="line">duplicate-cn  # 允许多个客户端使用同一个配置文件</span><br><span class="line">verb <span class="number">3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>OpenVPN生成的客户端配置在设置的用户名home目录下，有个<user>.ovpn, 修改这个配置文件如下：</li>
</ul>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">client</span><br><span class="line">proto tcp</span><br><span class="line">remote &lt;公网IP&gt; &lt;端口&gt;</span><br><span class="line">dev tun</span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">dhcp-option DNS 192.168.5.1 <span class="comment"># 配置为你的默认的DNS服务器地址</span></span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">remote-cert-tls server</span><br><span class="line">verify-x509-name server_JFIAtsavKPr9oaij name</span><br><span class="line">auth SHA256</span><br><span class="line">auth-nocache</span><br><span class="line">cipher AES-128-GCM</span><br><span class="line">tls-client</span><br><span class="line">tls-version-min 1.2</span><br><span class="line">tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256</span><br><span class="line">ignore-unknown-option block-outside-dns</span><br><span class="line">;setenv opt block-outside-dns <span class="comment"># Prevent Windows 10 DNS leak</span></span><br><span class="line">verb 3</span><br><span class="line">&lt;ca&gt;</span><br><span class="line"><span class="params">-----BEGIN</span> CERTIFICATE<span class="params">-----</span></span><br><span class="line"><span class="string">......</span> <span class="comment"># 省略</span></span><br><span class="line"><span class="params">-----END</span> CERTIFICATE<span class="params">-----</span></span><br><span class="line">&lt;<span class="string">/ca</span>&gt;</span><br><span class="line">&lt;cert&gt;</span><br><span class="line"><span class="params">-----BEGIN</span> CERTIFICATE<span class="params">-----</span></span><br><span class="line"><span class="string">......</span> <span class="comment"># 省略</span></span><br><span class="line"><span class="params">-----END</span> CERTIFICATE<span class="params">-----</span></span><br><span class="line">&lt;<span class="string">/cert</span>&gt;</span><br><span class="line">&lt;key&gt;</span><br><span class="line"><span class="params">-----BEGIN</span> ENCRYPTED PRIVATE KEY<span class="params">-----</span></span><br><span class="line"><span class="string">......</span> <span class="comment"># 省略</span></span><br><span class="line"><span class="params">-----END</span> ENCRYPTED PRIVATE KEY<span class="params">-----</span></span><br><span class="line">&lt;<span class="string">/key</span>&gt;</span><br><span class="line">&lt;tls-crypt&gt;</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2048 bit OpenVPN static key</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="params">-----BEGIN</span> OpenVPN Static key V1<span class="params">-----</span></span><br><span class="line"><span class="string">......</span> <span class="comment"># 省略</span></span><br><span class="line"><span class="params">-----END</span> OpenVPN Static key V1<span class="params">-----</span></span><br><span class="line">&lt;<span class="string">/tls-crypt</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>Windows安装openvpn客户端, <code>scoop install openvpn</code></li>
<li>CentOS安装openvpn客户端, <code>yum -y install openvpn</code>，CentOS openvpn client启动命令为：openvpn –config /data/openvpn/com-lan.ovpn –daemon</li>
</ul>
]]></content>
      <tags>
        <tag>OpenVPN</tag>
      </tags>
  </entry>
  <entry>
    <title>RSS订阅和阅读简明教程</title>
    <url>/post/rss-tutorial.html</url>
    <content><![CDATA[<h2 id="RSS是什么？"><a href="#RSS是什么？" class="headerlink" title="RSS是什么？"></a>RSS是什么？</h2><p><img src="https://blog.ziiyc.com/images/b71b080ef4c4f34c68e28e259856d177_MD5.jpg" alt="rss-tutorial-1.jpg"></p>
<blockquote>
<p>RSS是一种内容信息聚合技术。简单点讲，你可以订阅自己关心的内容，例如博客，视频网站，知乎，简书，微信公众号，播客，门户网站等，当内容更新时自动同步到阅读器中，最终所有信息汇总到一个应用里查看阅读。</p>
</blockquote>
<span id="more"></span> 

<h2 id="开始使用RSS"><a href="#开始使用RSS" class="headerlink" title="开始使用RSS"></a>开始使用RSS</h2><ol>
<li>使用电脑端Chrome打开<a href="http://www.inoreader.com/">inoreader</a>,注册一个账号</li>
<li>注册成功且登录之后，点击搜索按钮，输出本博客的订阅地址：<a href="https://blog.ziiyc.com/atom.xml">https://blog.ziiyc.com/atom.xml</a>, 如下图所示,选中之后点击右上角的订阅即可</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/c22009ba29766a9a62c893463f92b6ed_MD5.jpg" alt="rss-tutorial-4.jpg"></p>
<h2 id="在线RSS阅读软件：inoreader"><a href="#在线RSS阅读软件：inoreader" class="headerlink" title="在线RSS阅读软件：inoreader"></a>在线RSS阅读软件：<a href="http://www.inoreader.com/">inoreader</a></h2><p>一款类似Google Reader的RSS阅读器，阅读器支持平台包括Web,Android,iOS。</p>
<p><del>接近两年的使用inoreader，让人深刻的意识到inoreader在阅读体验上很是糟糕。</del></p>
<p>使用inoreader接近四年，阅读体验近期有了一些改观，虽谈不上舒适，但也是可以比较正常使用了，比如添加了阅读区域手动调整功能。</p>
<h2 id="谈谈其他RSS阅读软件使用体验"><a href="#谈谈其他RSS阅读软件使用体验" class="headerlink" title="谈谈其他RSS阅读软件使用体验"></a>谈谈其他RSS阅读软件使用体验</h2><ul>
<li><p><a href="http://irreader.netqon.com/">irreader</a><br>这个阅读工具近期不怎么更新了，从阅读体验上看是很不错的，但没有同步，没有手机端, 缺少信息过滤功能</p>
</li>
<li><p><a href="https://feedly.com/">feedly</a><br>使用过一段时间，功能够用，界面美观，需要科学上网，缺点是收费贵。</p>
</li>
<li><p><a href="https://tt-rss.org/">Tiny Tiny RSS</a><br>自建rss阅读服务器方案，从全文阅读，繁体转简体，文章过滤等功能脚本看，应有尽有，但实际阅读体验不佳，手机端可用软件匮乏，且质量不怎么样。网页端阅读使用Google Reader主题算是美观。</p>
</li>
<li><p><a href="https://nodetics.com/feedbro/">feedbro</a><br>浏览器rss阅读方案，支持Chrome，Firefox主流浏览器，在阅读体验是可以说是最优秀的，因为运行环境是浏览器，所以不会出现订阅源常见的没有全文，图片显示不全的问题。遗憾的有两点，一是不支持任意形式同步，二是不支持其他终端，比如Web端、手机端。</p>
</li>
</ul>
<h2 id="如何订阅RSS"><a href="#如何订阅RSS" class="headerlink" title="如何订阅RSS?"></a>如何订阅RSS?</h2><h3 id="1-Tampermonkey-RSS"><a href="#1-Tampermonkey-RSS" class="headerlink" title="1. Tampermonkey + RSS+"></a>1. Tampermonkey + RSS+</h3><p><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN">Tampermonkey</a></p>
<p><a href="https://greasyfork.org/zh-CN/scripts/373252-rss-show-site-all-rss">RSS+</a></p>
<p><img src="https://blog.ziiyc.com/images/480c0d4909167b70fabb29d35296353f_MD5.jpg" alt="rss-tutorial-2.jpg"></p>
<h3 id="2-浏览器插件：RSSHub"><a href="#2-浏览器插件：RSSHub" class="headerlink" title="2. 浏览器插件：RSSHub"></a>2. 浏览器插件：RSSHub</h3><p>支持显示RSSHub网站支持的订阅地址直接显示</p>
<h3 id="3-第三方订阅服务"><a href="#3-第三方订阅服务" class="headerlink" title="3. 第三方订阅服务"></a>3. 第三方订阅服务</h3><ul>
<li><a href="https://docs.rsshub.app/">rsshub</a>: 网站集成了主流网站的订阅方式，很强大，不断更新 推荐指数：⭐️⭐️⭐️⭐️⭐️</li>
<li>微博: <a href="https://api.izgq.net/weibo/rss/%7Buid%7D">https://api.izgq.net/weibo/rss/{uid}</a> 推荐指数：⭐️⭐️⭐️⭐️⭐️<br>PS: uid, 用户 id, 博主主页打开控制台执行 <code>/uid=(\d+)/. exec(document.querySelector(&#39;.opt_box .btn_bed&#39;).getAttribute(&#39;action-data&#39;))[1]</code> 获取</li>
<li>知乎: <a href="https://rss.lilydjwg.me/">https://rss.lilydjwg.me/</a> 推荐指数：⭐️⭐️⭐️⭐️</li>
<li>简书: <a href="http://jianshu.milkythinking.com/">http://jianshu.milkythinking.com/</a> 推荐指数：⭐️⭐️⭐️⭐️</li>
<li>Twitter: <a href="https://twitrss.me/twitter_user_to_rss/?user=%7Buid%7D">https://twitrss.me/twitter_user_to_rss/?user={uid}</a> 推荐指数：⭐️⭐️⭐️⭐️</li>
<li>Facebook: <a href="https://fbfeed.github.io/">https://fbfeed.github.io/</a> 推荐指数：⭐️⭐️⭐️⭐️</li>
</ul>
<h2 id="RSS进阶"><a href="#RSS进阶" class="headerlink" title="RSS进阶"></a>RSS进阶</h2><h3 id="RSS全文输出"><a href="#RSS全文输出" class="headerlink" title="RSS全文输出"></a>RSS全文输出</h3><h4 id="自建服务器方案"><a href="#自建服务器方案" class="headerlink" title="自建服务器方案"></a>自建服务器方案</h4><ul>
<li><p><a href="https://github.com/feedocean/rss2full">rss2full</a> 推荐指数：⭐️⭐️⭐️⭐️<br>大部分情况可以得到一个不错的全文输出效果,举例：<a href="http://www.xingkbjm.com/feed">http://www.xingkbjm.com/feed</a></p>
</li>
<li><p><a href="https://tt-rss.org/">tiny tiny rss + mercury</a> 推荐指数：⭐️⭐️<br>这种方式是通过调用mercury生成全文方式，需要搭建mercury服务端</p>
</li>
</ul>
<h4 id="使用第三方服务"><a href="#使用第三方服务" class="headerlink" title="使用第三方服务"></a>使用第三方服务</h4><ol>
<li> <a href="http://fullcontentrss.com/">fullcontentrss</a>  推荐指数：⭐️⭐️⭐️⭐️⭐️</li>
<li> <a href="http://ftr.fivefilters.org/">Full-Text RSS</a>    推荐指数：⭐️⭐️⭐️⭐️</li>
<li> <a href="https://www.freefullrss.com/">freefullrss</a>        推荐指数：⭐️⭐️⭐️</li>
</ol>
<h3 id="信息过滤"><a href="#信息过滤" class="headerlink" title="信息过滤"></a>信息过滤</h3><p>当RSS内容既包含你想要的内容，也有一些不想看到的内容，需要使用关键字过滤。</p>
<ol>
<li>inoreader非付费用户只能过滤一个订阅源。</li>
<li>如果需要大量过滤，可以尝试搭建<strong>Tiny Tiny RSS</strong>。</li>
</ol>
<h3 id="制作RSS-Feed"><a href="#制作RSS-Feed" class="headerlink" title="制作RSS Feed"></a>制作RSS Feed</h3><h4 id="1：Feed43（免费）"><a href="#1：Feed43（免费）" class="headerlink" title="1：Feed43（免费）"></a>1：Feed43（免费）</h4><p>官网：<a href="http://feed43.com/">http://feed43.com/</a>   </p>
<p>推荐指数：⭐️⭐️⭐️</p>
<p>教程：<a href="https://post.smzdm.com/p/553684/">FEED43新手教程：为任意网页定制RSS格式订阅源</a></p>
<h4 id="2：Fivefilters-Feed-Creator"><a href="#2：Fivefilters-Feed-Creator" class="headerlink" title="2：Fivefilters Feed Creator"></a>2：Fivefilters Feed Creator</h4><p>官网：<a href="http://createfeed.fivefilters.org/index.php">http://createfeed.fivefilters.org/index.php</a></p>
<p>推荐指数：⭐️⭐️⭐️⭐️</p>
<ol>
<li><p>“Enter web page URL”就是输入网页网址，例如<a href="https://www.ipcfun.com/">https://www.ipcfun.com/</a></p>
</li>
<li><p>“Look for links inside HTML elements whose id or class attribute contains” 根据ID或Class筛选元素，例如entry-title</p>
</li>
<li><p>“Only keep links if link URL contains”URL过滤，仅保留包含指定字符串的链接，例如html</p>
</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/c1e1582422c08d0d43441c963a3ec9ce_MD5.jpg" alt="rss-tutorial-3.jpg"></p>
<h4 id="3：Fetchrss"><a href="#3：Fetchrss" class="headerlink" title="3：Fetchrss"></a>3：Fetchrss</h4><p>官网：<a href="http://fetchrss.com/">http://fetchrss.com/</a> </p>
<p>推荐指数：⭐️⭐️⭐️⭐️</p>
<p>GUI界面操作，非常简单易懂。</p>
<h3 id="inoreader使用体验提升"><a href="#inoreader使用体验提升" class="headerlink" title="inoreader使用体验提升"></a>inoreader使用体验提升</h3><h4 id="安装去广告插件AdBlock"><a href="#安装去广告插件AdBlock" class="headerlink" title="安装去广告插件AdBlock"></a>安装去广告插件<a href="https://chrome.google.com/webstore/detail/adblock-%E2%80%94-best-ad-blocker/gighmmpiobklfepjocnamgkkbiglidom">AdBlock</a></h4><p>此浏览器插件可以解决在使用免费版Inoreader阅读文章免除广告的骚扰</p>
<h4 id="安装油猴脚本：显示防盗链图片-for-Inoreader"><a href="#安装油猴脚本：显示防盗链图片-for-Inoreader" class="headerlink" title="安装油猴脚本：显示防盗链图片 for Inoreader"></a>安装油猴脚本：<a href="https://greasyfork.org/zh-CN/scripts/376884-%E6%98%BE%E7%A4%BA%E9%98%B2%E7%9B%97%E9%93%BE%E5%9B%BE%E7%89%87-for-inoreader">显示防盗链图片 for Inoreader</a></h4><p>此脚本可以解决在Inoreader订阅爱稀奇时图片不能正常显示的问题</p>
<h2 id="RSS原理延伸"><a href="#RSS原理延伸" class="headerlink" title="RSS原理延伸"></a>RSS原理延伸</h2><h3 id="1-场景一"><a href="#1-场景一" class="headerlink" title="1. 场景一"></a>1. 场景一</h3><p>在某个卖二手论坛里经常出现性价比很高的二手货，正好你最近有想买的IPad 2，你想有一个工具，当论坛里出现有想要的IPad 2的时候自动提醒你，让你能够以最快的速度入手。</p>
<p>解决方法：<a href="https://play.google.com/store/apps/details?id=me.webalert&hl=zh-CN">网页更新提醒工具</a></p>
<p>使用方法：软件记录的网页操作，并到你的选定的网址中监测某些网页元素的变动，一有变动，就可以提醒。</p>
<h4 id="2-场景二"><a href="#2-场景二" class="headerlink" title="2. 场景二"></a>2. 场景二</h4><p>在淘宝，天猫，京东等一些购物网站一些物品价格经常价格变动，我们想以比较低的价格入手，便需要了解价格的实时变动信息，并在价格低于自己预期的时候购买。</p>
<p>解决方法：惠惠购物助手</p>
<p>使用方法：在手机端和浏览器端安装惠惠购物助手。将自己关心的商品放入惠惠助手的购物车中，在软件中可设置价格。当价格低于某一数值时，手机端发出提醒。</p>
<h4 id="3-场景三"><a href="#3-场景三" class="headerlink" title="3. 场景三"></a>3. 场景三</h4><p>“如果天气晴朗，提醒我晒被子。”用英语将句式提取出来就是If this then that.生活中很多这种判断，如果这种判断能用软件实现那该多好。</p>
<p>解决方法：IFTTT(安卓，Web)</p>
<p>使用方法：在软件添加各种条件和结果，满足条件时自动执行。</p>
<h4 id="4-场景四"><a href="#4-场景四" class="headerlink" title="4. 场景四"></a>4. 场景四</h4><p>逢年过节，总是要抢车票。到了回家前几天，票总是被一扫而空。但心想也许会有人退票，那你可能需要一款软件能够实时检测余票，并提醒你。</p>
<p>解决方法：智行</p>
<p>使用方法：本地云监控，发现有余票即时提醒。</p>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul>
<li>2020-3-17：</li>
</ul>
<ol>
<li>更新现在的使用方式</li>
<li>重新排版，去除一些无用的内容，删除失效的工具</li>
<li>添加新的RSS全文输出工具：rss2full</li>
<li>解决Inoreader显示防链接图片问题</li>
</ol>
<ul>
<li>2018-9-3：<ul>
<li>更新图片为国内图床</li>
<li>更新比较完美的微博RSS订阅的方法：方法三</li>
<li>完善微信公众号全文RSS订阅的方法：irreader+feed43</li>
<li>更新Twitter全文RSS订阅的方法：twitrss.me</li>
<li>更新irreader的简述</li>
</ul>
</li>
<li>2018-8-27：更新irreader(一款本地播客，RSS阅读工具)</li>
<li>2018-8-20：更新制作RSS Feed的方法</li>
<li>2018-8-8：更改排版，更新提供全文输出RSS的网站，增加提供RSS生成制作的网站</li>
<li>2018-7-7：更新RSSHub中大部分主流网站，重新排版文章，删除过时和错误的方法。</li>
<li>2017-7-3：更新全文输出网站freefullrss</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>效率生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Resilio Sync使用教程</title>
    <url>/post/resilio-sync-tutorial.html</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>无法获取追踪器列表，没有可用的跟踪程序连接，无法链接设备</p>
<span id="more"></span>

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>科学上网-大陆白名单</p>
<h2 id="Resilio-Sync-使用教程"><a href="#Resilio-Sync-使用教程" class="headerlink" title="Resilio Sync 使用教程"></a>Resilio Sync 使用教程</h2><ol>
<li>下载安装包：<a href="https://download-cdn.resilio.com/stable/windows64/Resilio-Sync_x64.exe">https://download-cdn.resilio.com/stable/windows64/Resilio-Sync_x64.exe</a></li>
<li>如下图所示，按下一步</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/311516b07078e55881b98769f721c10d_MD5.png" alt="resilio-sync-tutorial-1.png"></p>
<ol start="3">
<li>安装成功后，如下图所示</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/d7fe8b1a221265a271abe962c3048a40_MD5.png" alt="resilio-sync-tutorial-2.png"></p>
<ol start="4">
<li>添加密钥</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/4d3630a206b9bc4f51aec3accaede4c5_MD5.png" alt="resilio-sync-tutorial-3.png"></p>
<p><img src="https://blog.ziiyc.com/images/8a311a26cf78d993e7dc39afb3c24cc8_MD5.png" alt="resilio-sync-tutorial-4.png"></p>
<p><strong>PS:选择性同步仅同步你想要同步的文件，关闭的情况下同步所有的文件</strong></p>
<ol>
<li>选择保存路径，文件就可以自己同步。</li>
</ol>
<h2 id="无限试用方法"><a href="#无限试用方法" class="headerlink" title="无限试用方法"></a>无限试用方法</h2><ol>
<li>安装 Resilio Sync （废话）</li>
<li>点击“试用 Pro 版 30 天”</li>
<li>打开程序的安装目录，找到License文件夹，用编辑器打开 license.bin ，你会看到一些乱码，没关系，把 expirationixxxxxxxxxxxx （你的许可到期时间）改成 expirationi1766477045e5 ，1766477045e5的意思是 2025/12/23 16:04:05，所以这相当于无限试用了吧2333</li>
</ol>
<h2 id="2017-6-11：Resilio-Sync-无法获取追踪器列表的解决办法"><a href="#2017-6-11：Resilio-Sync-无法获取追踪器列表的解决办法" class="headerlink" title="2017-6-11：Resilio Sync 无法获取追踪器列表的解决办法"></a>2017-6-11：Resilio Sync 无法获取追踪器列表的解决办法</h2><p>今天碰到这样的问题–软件件下方提示 无法获取追踪器列表 的，英文版本提示 cannot get the list of trackers<br>目前解决的办法也很简单。<br><strong>WINDOWS 用户修改 C:\Windows\System32\drivers\etc\hosts<br>Linux Mac 等用户修改 /etc/hosts</strong><br>用记事本打开修改就可以<br>添加下面一行<br><strong>54.230.143.112   config.getsync.com</strong><br>修改后如下<br>退出重新启动 Resilio Sync 软件。就可以飞起来了，少年加油.</p>
<p><strong>PS: 此后使用过程中一直会显示“Sync Pro | 还剩 30 天”的字样</strong></p>
<h2 id="自己收藏的资源密钥"><a href="#自己收藏的资源密钥" class="headerlink" title="自己收藏的资源密钥"></a>自己收藏的资源密钥</h2><h3 id="电子书库"><a href="#电子书库" class="headerlink" title="电子书库"></a>电子书库</h3><p>编程随想：<br>BRSSYZTSAC6UGYTUOJ22L4GCO7QESPPBD    政治<br>BNZ6DOA6W577O6GUNH7C3MY6DWC6FTDQB    心理学<br>BSH7FXJFVWJTKWGSX5GTWX7PHZZ2D2M7Q    历史<br>B2FRYA6AXCDW6CF4YJVFWKH2HAXOFICOX    经济<br>B3WNBTAAFFAODFR6FQ3E3L5BBSJAFNBSJ    管理<br>BZR4TTYHT25QWUIE6YNMAKWUGBHKSGLC6    社会学<br>BMBB5YLBIJJAE5H6TP27OS7YCEUKCYHZK    文艺<br>B6WWVBXPMZDI5IL4KED6AAHA5FO4UNKQF    哲学<br>BMWWZALG4P56LREF47EE2WSWHZEM4E6BL    军事<br>BUPSDXFA3TP7KCMLHALRHLIX2FEJEUJFE    IT<br>mebook.cc<br>BN5T34NFGECAYDRF4DW2QFCJZQN4IZ4O7    2016年以前<br>BLPBKUS7BUVOEQP7NLLPBATBQ5RYXFVXR    最近更新<br>kindlefere.com<br>BOC3NIGPF2DOKETOF2FAHXJXE2HF24QWC    中文<br>BZGL26OZ4AFMOYFXJ4WGI4YIG4LOIDA43     英文<br>B4TDKK7OLYBW7OAG3ILYLQPLFK3QSTAS4     每周一书<br>BLE2YCVCA3JPQCRZGDQVTFTKQYPDH5MQC     kindle伴侣系列推荐<br>BBADTVEZKA34CG7XCW4AWTBG6FWFDWAGC    经济学人2013-2016<br>电子书库<br>BQ36ZETYSW4SLJ2VMPIGXATAEMXYKXDHT    丛书系列<br>BZCTXN7QYCMXS5PINIEO3JU7C7YFI6GOR    主题分类<br>B7ZJOFU5YGHTVQOT42JLGOULNTPTZ73FS    科普读物<br>BR5XUQVQL7QFJBIIKFSAETAFCPANTBRCO    学习书单<br>BZ7VZSMPAORFQ2FP5PSJK4P2PAND6WD66    网友荐书</p>
<h3 id="站点分享"><a href="#站点分享" class="headerlink" title="站点分享"></a>站点分享</h3><h4 id="2017-6-11更新"><a href="#2017-6-11更新" class="headerlink" title="2017-6-11更新"></a>2017-6-11更新</h4><ul>
<li><p><strong>微力同步 Resilio Sync Key： <a href="http://verysync.com/">http://verysync.com/</a></strong></p>
<h4 id="之前分享"><a href="#之前分享" class="headerlink" title="之前分享"></a>之前分享</h4></li>
<li><p>btsync吧：<a href="http://tieba.baidu.com/f?kw=btsync&amp;ie=utf-8">http://tieba.baidu.com/f?kw=btsync&amp;ie=utf-8</a> </p>
</li>
<li><p>Resilio Sync Keys List：<a href="http://changlai.net/">http://changlai.net/</a></p>
</li>
<li><p>知乎问答：<a href="https://www.zhihu.com/question/21517918">https://www.zhihu.com/question/21517918</a></p>
</li>
<li><p>BT资源导航：<a href="http://wherebt.com/">http://wherebt.com/</a> btsync：<a href="http://btsync.space/">http://btsync.space/</a></p>
</li>
<li><p>BTSync中文发布站：<a href="https://btsync.org/">https://btsync.org/</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Resilio Sync</tag>
      </tags>
  </entry>
  <entry>
    <title>Scoop-Windows包管理器教程</title>
    <url>/post/scoop-tutorial.html</url>
    <content><![CDATA[<h2 id="安装Scoop"><a href="#安装Scoop" class="headerlink" title="安装Scoop"></a>安装Scoop</h2><p><a href="https://scoop.sh/">Scoop官网</a></p>
<p><a href="https://github.com/lukesampson/scoop">Scoop-Github</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开Powershell(非管理员)</span></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义Scoop安装目录</span></span><br><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">&#x27;D:\Scoop&#x27;</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;SCOOP&#x27;</span>, <span class="variable">$env:SCOOP</span>, <span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Scoop命令</span></span><br><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">iwr</span> <span class="literal">-useb</span> get.scoop.sh | <span class="built_in">iex</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="使用Scoop安装卸载软件"><a href="#使用Scoop安装卸载软件" class="headerlink" title="使用Scoop安装卸载软件"></a>使用Scoop安装卸载软件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scoop install 7<span class="built_in">zip</span> git-<span class="keyword">with</span>-openssh</span><br><span class="line">scoop uninstall 7<span class="built_in">zip</span> git-<span class="keyword">with</span>-openssh</span><br></pre></td></tr></table></figure>

<h2 id="使用Scoop添加移除仓库"><a href="#使用Scoop添加移除仓库" class="headerlink" title="使用Scoop添加移除仓库"></a>使用Scoop添加移除仓库</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 查看仓库列表</span></span><br><span class="line">scoop bucket list</span><br><span class="line"><span class="meta"># 查看推荐仓库</span></span><br><span class="line">scoop bucket known</span><br><span class="line"><span class="meta"># 添加推荐仓库</span></span><br><span class="line">scoop bucket <span class="keyword">add</span> extras</span><br><span class="line"><span class="meta"># 添加第三方仓库</span></span><br><span class="line">scoop bucket <span class="keyword">add</span> [bucket-name] [git-repo]</span><br><span class="line">scoop bucket <span class="keyword">add</span> zapps https:<span class="comment">//github.com/kkzzhizhou/scoop-zapps</span></span><br><span class="line"><span class="meta"># 移除仓库</span></span><br><span class="line">scoop bucket rm [bucket-name]</span><br><span class="line">scoop bucket rm extras</span><br></pre></td></tr></table></figure>

<h2 id="自建软件仓库"><a href="#自建软件仓库" class="headerlink" title="自建软件仓库"></a>自建软件仓库</h2><p><a href="https://github.com/lukesampson/scoop/wiki">官方教程</a></p>
<h2 id="合并多个软件仓库"><a href="#合并多个软件仓库" class="headerlink" title="合并多个软件仓库"></a>合并多个软件仓库</h2><p><a href="../attachments/28090.sh">mergebucket.sh</a></p>
<h2 id="软件仓库自动更新"><a href="#软件仓库自动更新" class="headerlink" title="软件仓库自动更新"></a>软件仓库自动更新</h2><p><a href="https://github.com/ScoopInstaller/Excavator">Excavator</a></p>
<h3 id="使用Docker自动更新"><a href="#使用Docker自动更新" class="headerlink" title="使用Docker自动更新"></a>使用Docker自动更新</h3><ul>
<li><p>修改项目bin\auto-pr.ps1中是项目名称</p>
</li>
<li><p>新建docker-compose.yml文件，内容如下：</p>
  <figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  bucket:</span></span><br><span class="line"><span class="symbol">    image:</span> r15ch13/excavator:latest</span><br><span class="line"><span class="symbol">    deploy:</span></span><br><span class="line"><span class="symbol">      mode:</span> global <span class="meta"># creates only one container</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="keyword">/usr/</span>local<span class="keyword">/scoop/</span>.ssh:<span class="keyword">/root/</span>.ssh</span><br><span class="line">      - <span class="keyword">/usr/</span>local<span class="keyword">/scoop/</span>log:<span class="keyword">/root/</span>log</span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line"><span class="symbol">      GIT_USERNAME:</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="symbol">      GIT_EMAIL:</span> <span class="string">&quot;xxx@gmail.com&quot;</span></span><br><span class="line"><span class="symbol">      BUCKET:</span> <span class="string">&quot;xxx/xxx&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改environment中的变量</p>
</li>
<li><p>修改volumes中.ssh映射目录，将私钥放入.ssh目录中</p>
</li>
<li><p>启动Docker</p>
  <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">screen </span>-S <span class="keyword">scoop</span></span><br><span class="line"><span class="keyword"></span>docker-compose up</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>包管理器</tag>
      </tags>
  </entry>
  <entry>
    <title>Tampermonkey脚本推荐</title>
    <url>/post/tampermonkey-scripts.html</url>
    <content><![CDATA[<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2018-9-2：介绍我使用过的js脚本</p>
<h2 id="脚本清单"><a href="#脚本清单" class="headerlink" title="脚本清单"></a>脚本清单</h2><ul>
<li><p><a href="https://greasyfork.org/zh-CN/scripts/39504-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E5%8A%A0%E9%80%9F%E7%89%88">百度网盘直接下载助手 直链加速版</a></p>
<ul>
<li>说明：百度网盘提取直链，配合IDM下载</li>
</ul>
</li>
<li><p><a href="https://greasyfork.org/zh-CN/scripts/14151-baidu-tieba-no-login">百度贴吧：不登录即可看贴</a></p>
</li>
<li><p><a href="https://greasyfork.org/zh-CN/scripts/1002-%E7%BD%91%E7%9B%98%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E6%8F%90%E5%8F%96%E5%AF%86%E7%A0%81">网盘自动填写提取密码</a></p>
</li>
<li><p><a href="https://greasyfork.org/scripts/32525-%E9%97%B2%E9%B1%BC%E6%90%9C%E7%B4%A2%E6%A1%86%E6%98%BE%E7%A4%BA">闲鱼搜索框显示</a></p>
</li>
<li><p><a href="https://greasyfork.org/scripts/28356-iqiyi-player-switch">iqiyi-player-switch</a></p>
<ul>
<li>说明：爱奇艺flash播放器与html5播放器随意切换，改善html5播放器播放体验。 </li>
</ul>
</li>
<li><p><a href="https://greasyfork.org/zh-CN/scripts/370005-%E4%B8%80%E9%94%AEvip%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90-%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91-%E4%B8%80%E7%AB%99%E5%BC%8F%E9%9F%B3%E4%B9%90%E6%90%9C%E7%B4%A2%E4%B8%8B%E8%BD%BD-2018-08-31-%E5%8F%AF%E7%94%A8">一键VIP视频解析、去广告（全网）,一站式音乐搜索下载 2018-08-31 可用</a></p>
</li>
</ul>
<p>本文结束。</p>
<span id="more"></span> 


]]></content>
      <tags>
        <tag>效率生活</tag>
        <tag>js脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Thunderbird Portable开机自启动并最小化到系统托盘</title>
    <url>/post/thunderbird-minimized-auto-start.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ol>
<li>便携应用设置为开机启动时会自动打开主界面</li>
<li>Thunderbird 60.0官方并不支持最小化到系统托盘</li>
<li>Thunderbird 第三方最小化到系统托盘的插件如FireTray，最多支持到54.X，在最新版的Thunderbird中并不可用。</li>
</ol>
<span id="more"></span> 

<h2 id="可行解决方案：AHK，全称AutoHotkey"><a href="#可行解决方案：AHK，全称AutoHotkey" class="headerlink" title="可行解决方案：AHK，全称AutoHotkey"></a>可行解决方案：AHK，全称AutoHotkey</h2><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="comment">;=====================================================================</span></span><br><span class="line"><span class="comment">;                 Thunderbird Portable 60.0+ Tray</span></span><br><span class="line"><span class="comment">;                            Author:zzz</span></span><br><span class="line"><span class="comment">;                           date:2018-8-31</span></span><br><span class="line"><span class="comment">;             使用方法：将AHK放在ThunderbirdPortable.exe目录中运行</span></span><br><span class="line"><span class="comment">;               理论上支持所有Thunderbird版本，包括以后发布的版本</span></span><br><span class="line"><span class="comment">;---------------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#NoEnv</span></span><br><span class="line">SendMode Input  </span><br><span class="line"><span class="built_in">SetWorkingDir %</span><span class="built_in">A_ScriptDir</span>%  </span><br><span class="line">DllCall(<span class="string">&quot;kernel32.dll\SetProcessShutdownParameters&quot;</span>, UInt, <span class="number">0</span>x4FF, UInt, <span class="number">0</span>)</span><br><span class="line"><span class="meta">#SingleInstance ignore</span></span><br><span class="line"><span class="built_in">menu,</span>tray,icon,App\AppInfo\appicon.ico</span><br><span class="line"><span class="comment">;title must contain</span></span><br><span class="line"><span class="built_in">SetTitleMatchMode,</span> <span class="number">2</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">Run,</span> ThunderbirdPortable.exe</span><br><span class="line"><span class="built_in">WinWait,</span> <span class="keyword">ahk_exe</span> Thunderbird.exe</span><br><span class="line"><span class="comment">;WinMinimize, ahk_exe Thunderbird.exe</span></span><br><span class="line"><span class="built_in">WinHide,</span> <span class="keyword">ahk_exe</span> Thunderbird.exe</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">OnExit,</span> ExitSub</span><br><span class="line"></span><br><span class="line">OnMessage(<span class="number">0</span>x404, <span class="string">&quot;AHK_NOTIFYICON&quot;</span>)</span><br><span class="line">OnMessage(<span class="number">0</span>x11, <span class="string">&quot;WM_QUERYENDSESSION&quot;</span>) </span><br><span class="line">AHK_NOTIFYICON(wParam, lParam)</span><br><span class="line">&#123;</span><br><span class="line">    if (lParam = <span class="number">0</span>x202) <span class="comment">; WM_LBUTTONUP</span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="built_in">		WinShow,</span> - Mozilla Thunderbird</span><br><span class="line"><span class="built_in">		WinActivate,</span> - Mozilla Thunderbird</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">WM_QUERYENDSESSION(wParam, lParam)</span><br><span class="line">&#123;</span><br><span class="line">  ENDSESSION_LOGOFF = <span class="number">0</span>x80000000</span><br><span class="line"><span class="built_in">  Process,</span>Close,Thunderbird.exe</span><br><span class="line"><span class="built_in">  Process,</span>WaitClose,ThunderbirdPortable.exe</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ProcessExist(Name)&#123;</span><br><span class="line"><span class="built_in">	Process,</span>Exist,<span class="variable">%Name%</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Errorlevel</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Loop</span><br><span class="line">&#123;</span><br><span class="line">	If !ProcessExist(<span class="string">&quot;thunderbird.exe&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">ExitApp</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="built_in">	</span></span><br><span class="line"><span class="built_in">	WinGet,</span> winState, MinMax, <span class="keyword">ahk_exe</span> thunderbird.exe</span><br><span class="line">	if (winState = -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">		WinHide,</span> - Mozilla Thunderbird</span><br><span class="line">	&#125;</span><br><span class="line">   </span><br><span class="line">	sleep <span class="number">500</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">ExitSub:</span></span><br><span class="line"><span class="built_in">WinClose,</span><span class="keyword">ahk_exe</span> thunderbird.exe</span><br><span class="line"><span class="built_in">Process,</span>close,Thunderbird.exe</span><br><span class="line"><span class="keyword">ExitApp</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Thunderbird Minimize</tag>
        <tag>AHK应用</tag>
      </tags>
  </entry>
  <entry>
    <title>UEFI下实现Ubuntu To Go</title>
    <url>/post/ubuntu-to-go-uefi.html</url>
    <content><![CDATA[<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul>
<li>2018年9月2日：讲解如何U盘中安装UEFI启动的Ubuntu To Go</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从Windows To Go(简称WTG)变得越来越普及，于是Ubuntu To Go的尝试也越来越多，总结一下成功的经验。</p>
<p>网上很多介绍Ubuntu To Go的方法都是基于MBR的，个人有需求在一个U盘上（256GB）中同时安装Windows To Go，Ubuntu To Go和黑苹果，MacOS要求必须在GPT分区中使用，所以有了以下的折腾。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>虚拟机VMware Workstation(其它虚拟机如Vitualbox等应该也没问题)</li>
<li>Ubuntu安装镜像（iso格式，不用解压）</li>
<li>U盘一只（建议使用固态U盘，随机读写速度是普通U盘几十倍，淘宝搜Windows to go就能找到）</li>
<li>提前使用Diskgenius将U盘转为GPT分区，并且新建一个EFI分区，和预留Ubuntu空间（不新建分区）</li>
</ul>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol>
<li>新建一个虚拟机，将默认添加的硬盘删除，具体配置如下图所示。（安装过程选择不自动更新可以加速系统安装）</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/fc5a5cd610e4f7c0a2a10e2963cd4d4d_MD5.jpg" alt="ubuntu-to-go-uefi-1.jpg"></p>
<p>……</p>
<span id="more"></span> 

<ol>
<li>加载U盘到虚拟机中：虚拟机设置-添加-硬盘-SCSI-使用物理磁盘-选择U盘（一般是最后一个），添加后如下图所示。</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/161e0cab75601056634d281b6e2952ca_MD5.jpg" alt="ubuntu-to-go-uefi-2.jpg"></p>
<ol start="2">
<li>设置虚拟机为UEFI启动，如下图所示</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/cabf5e38a4acb4270db8b47252b31874_MD5.jpg" alt="ubuntu-to-go-uefi-3.jpg"></p>
<ol start="3">
<li>之后启动虚拟机，正常安装Ubuntu，因为VMware软件设计导致Ubuntu显示分辨率低，可以先启动到Ubuntu Live后调整分辨率再启动安装程序，如下图所示。</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/a3392914bb43dc3e4c5186e74c75fa28_MD5.jpg" alt="ubuntu-to-go-uefi-4.jpg"></p>
<ol start="4">
<li><p>之后就到了最关键的步骤了：安装完成之后请不要启动Ubuntu启动，先进入Ubuntu Live中。</p>
<p>5.1 安装grub-efi，打开终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -s</span><br><span class="line">apt-get install grub-efi</span><br></pre></td></tr></table></figure>

<p>5.2 挂载U盘中的EFI分区和Ubuntu系统分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看U盘挂载目录，一般是/dev/sda</span></span><br><span class="line"><span class="built_in">df</span> -l</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/EFI</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/Ubuntu</span><br><span class="line">mount /dev/sda1/ /mnt/EFI</span><br><span class="line">mount /dev/sda2 /mnt/Ubuntu</span><br></pre></td></tr></table></figure>

<p>5.3 安装EFI便捷启动到EFI分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --root-directory=/mnt/EFI/ --efi-directory=/mnt/EFI/Boot</span><br></pre></td></tr></table></figure>

<p>5.4 将系统启动文件/mnt/Ubuntu/boot/grub.cfg复制到/mnt/EFI/boot目录下</p>
<p>5.5 如果便携启动失败，可以尝试启动到系统后安装Grub Customizer，删除启动项后保存，再重复第五部分即可。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Ubuntu U盘</tag>
        <tag>Ubuntu 便携</tag>
      </tags>
  </entry>
  <entry>
    <title>USBIP实现路由器连接打印机，可打印可扫描</title>
    <url>/post/usbip.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，智能路由器的USB接口能够连接打印机，让没有网络功能的路由器实现网络打印。可惜的是，打印机连接路由器后提只能打印不能扫描，这很不方便。在寻找中发现一项<strong>USB over IP</strong> 技术（又称 USB over Ethernet 或者 USB over Internet），这个技术能够解决以上的问题，并能扩展出不少应用场景。</p>
<span id="more"></span> 
<h2 id="USB-over-IP简介"><a href="#USB-over-IP简介" class="headerlink" title="USB over IP简介"></a>USB over IP简介</h2><p>按照<a href="http://usbip.sourceforge.net/">官网</a>的描述，这个技术解决的问题是跨设备跨平台通过网络共享同一个USB设备。简单的理解就是，USB设备接在你的电脑上，我通过网络设备就是访问到该USB设备，就好像这个USB设备直接接在我的电脑上一样。</p>
<p>相关视频教程：<br><a href="https://www.youtube.com/watch?v=vGBWZzXx2KM">youtube:USB over Ethernet: Share USB devices over Ethernet</a></p>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>路由器：优酷土豆YK-L1(<strong>CPU：mt7620a，路由器配置软件源只跟CPU有关</strong>)<br>路由器操作系统：Pandorabox（<strong>基于openwrt 14.09 Barrier Breaker</strong> ）<br>打印机：三星SCX-3400系列（打印扫描复印一体机）<br>Windows平台：Win10</p>
<h2 id="步骤简介"><a href="#步骤简介" class="headerlink" title="步骤简介"></a>步骤简介</h2><ol>
<li>让路由器刷上基于openwrt的固件（如pandarobox）。<a href="http://downloads.pandorabox.com.cn/pandorabox/">下载地址</a><br> 注：如果路由器还没有刷Uboot，请先刷Uboot，再通过Uboot刷Openwrt固件。</li>
<li>配置Pandorabox软件源，在<strong>系统–软件包–配置</strong>中填入后提交<br> <strong>注：此软件源适用于mt7620a/n路由器，如果你的路由器不是此CPU，请自行查找软件源。</strong><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">dest root /</span><br><span class="line">dest ram /tmp</span><br><span class="line">lists_dir ext /var/opkg-lists</span><br><span class="line">option overlay_root /overlay</span><br><span class="line"><span class="attribute">src</span>/gz r2_base http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/base</span><br><span class="line"><span class="attribute">src</span>/gz r2_management http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/management</span><br><span class="line"><span class="attribute">src</span>/gz r2_oldpackages http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/oldpackages</span><br><span class="line"><span class="attribute">src</span>/gz r2_packages http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages</span><br><span class="line"><span class="attribute">src</span>/gz r2_routing http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/routing</span><br><span class="line"><span class="attribute">src</span>/gz r2_telephony http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/telephony</span><br><span class="line"><span class="attribute">src</span>/gz r2_oldpackages2 http://downloads.openwrt.org.cn/PandoraBox/ralink/mt7620_old/packages</span><br><span class="line"><span class="attribute">src</span>/gz <span class="number">16.10</span>_base http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base</span><br><span class="line"><span class="attribute">src</span>/gz <span class="number">16.10</span>_luci http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/luci</span><br><span class="line"><span class="attribute">src</span>/gz <span class="number">16.10</span>_packages http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/packages</span><br></pre></td></tr></table></figure></li>
<li>使用putty连接路由器，<a href="https://jingyan.baidu.com/article/90808022f011c5fd91c80f91.html">使用教程</a>。<strong>注：用户名：root，密码默认是admin</strong></li>
<li>在路由器上安装USBIP软件包。<a href="https://wiki.openwrt.org/doc/howto/usb.iptunnel">英文教程</a>，<a href="http://www.madox.net/blog/2013/01/04/tl-wr703n-example-project-3-wireless-3d-printing-or-2d-printing-or-just-simply-wireless-usb/">英文教程2</a><br> 注：<strong>在使用过程中会报错：error: please load usbip-core.ko and usbip-host.ko!</strong><br> 解决方法：终端输入<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">insmod /<span class="class"><span class="keyword">lib</span>/<span class="title">modules</span>/3.2.0-24-<span class="title">generic</span>/<span class="title">kernel</span>/<span class="title">drivers</span>/<span class="title">staging</span>/<span class="title">usbip</span>/<span class="title">usbip</span>-<span class="title">core</span>.<span class="title">ko</span> </span></span><br><span class="line">insmod /<span class="class"><span class="keyword">lib</span>/<span class="title">modules</span>/3.2.0-24-<span class="title">generic</span>/<span class="title">kernel</span>/<span class="title">drivers</span>/<span class="title">staging</span>/<span class="title">usbip</span>/<span class="title">usbip</span>-<span class="title">host</span>.<span class="title">ko</span></span></span><br></pre></td></tr></table></figure>
安装测试成功后可接相关指令放入<strong>系统-启动项-本地启动脚本</strong>添加命令后提交。</li>
<li>以上步骤已经把路由器端的软件安装配置好了，测试是否正常工作的方法是看以下命令是否正常运行</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">usbip list -l</span><br><span class="line">usbipd -D &amp; usbip bind -<span class="selector-tag">b</span> <span class="number">1</span>-<span class="number">1</span></span><br><span class="line">netstat -alpt |grep usbipd</span><br></pre></td></tr></table></figure>
<ol start="6">
<li><p>以下步骤是在Windows平台上操作。下载usbip_windows_v0.2.0.0_signed<a href="https://sourceforge.net/projects/usbip/">usbip下载</a></p>
</li>
<li><p>解压后安装驱动，打开设备管理员–选择此电–操作–添加过时硬件–从磁盘中安装。<br> <strong>注：如果无法正常安装，请用管理员权限打开命令行输入：bcdedit /set testsigning on</strong></p>
</li>
<li><p>安装成功能，用bat命令行（批处理运行）usbip.exe程序（<strong>该程序没有用户界面，只有命令行。</strong>），在解压路径中打开命令行，输入以下命令：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">usbip -h <span class="comment">//查看帮助</span></span><br><span class="line">usbip -l <span class="number">192.168</span>.<span class="number">1.1</span> <span class="comment">//查看路由器上连接的USB设备</span></span><br><span class="line">usbip -<span class="selector-tag">a</span> <span class="number">192.168</span>.<span class="number">1.1</span> <span class="number">1</span>-<span class="number">1</span>  <span class="comment">//连接到路由器的BUS 1-1</span></span><br></pre></td></tr></table></figure>
<p> <strong>注：可能遇到的问题：</strong><br> usbip err: usbip_network.c: 121 (usbip_recv_op_common) recv op_common,-1 usbip err:     usbip_windows.c: 756 (query_interface0) recv op_common<br> usbip err: usbip_windows.c: 829 (attach_device) cannot find device</p>
<p> 解决方法：下载这个去BUG版本的usbip程序。<a href="https://www.dropbox.com/s/oox021z1d7zblmu/usbip.zip?dl=0">下载地址</a></p>
</li>
<li><p>已经以上步骤连接成功后就可以正常使用了。连接成功提示如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">new usb device attached to usbvbus port <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p> 成功后，电脑会自动安装相应的驱动程序。Enjoy!</p>
</li>
</ol>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>除了以上共享打印机，扫描仪，还可以共享摄像头，共享3G无线网卡实现多人分享上网。<br><a href="http://www.wikidrv.cn/index.php?m=content&c=index&a=show&catid=14&id=116">相关介绍</a></p>
]]></content>
      <categories>
        <category>openwrt</category>
      </categories>
      <tags>
        <tag>usbip</tag>
      </tags>
  </entry>
  <entry>
    <title>VHD技术应用实例：Windows双系统最佳方案</title>
    <url>/post/vhd-dual-system.html</url>
    <content><![CDATA[<h2 id="技术简介"><a href="#技术简介" class="headerlink" title="技术简介"></a>技术简介</h2><p>VHD是一种<strong>虚拟磁盘文件格式</strong>，我们可以将系统安装在VHD中，直接从VHD文件启动操作系统。这种启动方式的特点：</p>
<ul>
<li>无制作难度，也不必单独拿一个分区来装系统，对原系统无影响，卸载也很方便。</li>
<li>同样使用虚拟磁盘装系统，但虚拟机安装性能大打折扣。使用此法可以获得与物理机安装几无差别的性能体验。不过，Win10的快速启动机制需要在实体机中安装才能正常运作（VHD中不能休眠），<strong>所以此法不适合想要体验快速启动的朋友。</strong></li>
<li>管理起来比较方便，只需删掉虚拟磁盘和启动菜单即可卸载。卸载方法最后还有提到</li>
<li><strong>读写可分离，可以实现秒备份和秒还原。</strong></li>
</ul>
<span id="more"></span> 

<p><strong>注意</strong>：此法只适用于在Windows7/8/8.1/10，Windows Server 2008 R2，WinPE 3.0系统下操作，可安装32位或64位。</p>
<h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><ol>
<li>到 <a href="http://www.itellyou.cn/">www.itellyou.cn</a> 下载windows 安装镜像，用ultraiso虚拟光驱加载。</li>
<li>下载 <strong>VHD OneKey</strong> 制作工具。</li>
<li>打开VHD_OneKey，对照下图，先创建VHD，并将系统映像灌输到VHD。</li>
</ol>
<p>参数说明：<br>VHD的位置可以为电脑硬盘上任意位置，但注意所在分区文件系统一定要是NTFS，整个过程不会影响分区中的其他文件；<br>VHD的格式可设为动态扩展；<br>VHD的大小自己看需要设置，建议最大容量不小于40G。对于动态类型的磁盘此处大小为限定最大容量，实际大小为安装后所有文件所占大小，随着文件数量增多会不断变大，即所谓动态的意思。但请注意，一定要保证分区有足够的剩余空间（剩余空间要大于设定的VHD大小），否则无法正常启动；<br>装入VHD的WIM位置选择挂载的镜像中sources下的install.wim文件；<br>映像号选择1；<br>设置好后，点确定。在弹出的确认窗口中点“是”。VHD创建后将自动挂载，系统若弹出对话框提示“格式化后才可用”，不用格式化，取消即可。等待进度达到100%并出现完成提示。</p>
<ol start="4">
<li>添加启动菜单</li>
</ol>
<p>点击“挂载VHD/VHDX”。弹出“只读挂载”提示时点“确定”。<br>挂载成功后，点击“向BCD中添加VHD/VHDX 项目”即可。<br>添加完成后就可以重启了！<br>完成上面的步骤正常情况下是没有问题的。如果你从VHD启动时提示winload错误，可以手动添加启动菜单：先按照上图所示挂载VHD。挂载成功后你就能在“计算机”或“这台电脑”中看到一个新的盘，比如是Z盘。以管理员身份运行cmd，输入下面的命令，回车创建启动菜单即可。</p>
<h2 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h2><p>回到你原来的系统中，执行下面两个操作：<br>1、删除菜单。按Win+R组合快捷键（Win即Windows徽标键）打开运行，输入 msconfig ，点“确定”，打开“系统配置”。在这里删除Win10预览版的启动菜单。<br>2、删除VHD文件。</p>
<h2 id="调整VHD空间大小"><a href="#调整VHD空间大小" class="headerlink" title="调整VHD空间大小"></a>调整VHD空间大小</h2><ol>
<li>使用Bootice-磁盘管理-VHD信息-调整大小</li>
</ol>
]]></content>
      <tags>
        <tag>vhd</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode使用Github作为图床</title>
    <url>/post/vscode-use-github-as-pic-bed.html</url>
    <content><![CDATA[<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>使用VSCode插件PicGo上传图片至Github博客（比如kkzzhizho.github.io)的images分支。</p>
<h2 id="博客仓库原先状态"><a href="#博客仓库原先状态" class="headerlink" title="博客仓库原先状态"></a>博客仓库原先状态</h2><p>一共有两个分支：source（博客源文件）和master（Hexo博客生成文件)</p>
<span id="more"></span> 

<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="新建一个远程空白分支：images"><a href="#新建一个远程空白分支：images" class="headerlink" title="新建一个远程空白分支：images"></a>新建一个远程空白分支：images</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将项目克隆到本地</span></span><br><span class="line">git <span class="built_in">clone</span> xxx</span><br><span class="line"><span class="built_in">cd</span> xxx</span><br><span class="line"><span class="comment"># 新建一个空白images</span></span><br><span class="line">git checkout --orphan images</span><br><span class="line"><span class="comment"># 清空当前项目</span></span><br><span class="line">git <span class="built_in">rm</span> -rf .</span><br><span class="line"><span class="comment"># 新建一个README.md文件（因为分支文件为空时不能推送到远端）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a imgaes branch&quot;</span> &gt; README&gt;.md</span><br><span class="line"><span class="comment"># 提交到远端</span></span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;Initial images branch&quot;</span></span><br><span class="line">git push origin images</span><br></pre></td></tr></table></figure>

<h3 id="安装并配置VSCode插件：PicGo"><a href="#安装并配置VSCode插件：PicGo" class="headerlink" title="安装并配置VSCode插件：PicGo"></a>安装并配置VSCode插件：PicGo</h3><ol>
<li>安装PicGo插件</li>
</ol>
<p>需要用到Picgo这个插件，直接在vscode中搜索安装就行。</p>
<ol start="2">
<li>配置PicGo插件</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/eb70ad7545dc3a2b8a61fd144ca3aa2a_MD5.png" alt="vscode-use-github-as-pic-bed-1.png"></p>
<ol start="3">
<li>申请Github Token</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/9b0adcbebc5e660a712b937743aa0f17_MD5.png" alt="vscode-use-github-as-pic-bed-2.png"></p>
<p><img src="https://blog.ziiyc.com/images/79b9302ca83fcfa195c5084d23fd118b_MD5.png" alt="vscode-use-github-as-pic-bed-3.png"></p>
<p><img src="https://blog.ziiyc.com/images/0f0574f5d08dd599be1bd75f3918f85c_MD5.png" alt="vscode-use-github-as-pic-bed-4.png"></p>
<p><img src="https://blog.ziiyc.com/images/852282b79f9ff8b204e1a088a0a0d4f4_MD5.png" alt="vscode-use-github-as-pic-bed-5.png"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode调试Python2.7代码</title>
    <url>/post/vscode-debug-python2.html</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>VSCode使用最新版本Python插件，调试Python2代码无反应</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Python插件调试时需要调用 <a href="https://github.com/microsoft/debugpy">debugpy</a>，debugpy在2022-03-25发布v1.6.0后不再支持调试Python 2</p>
<p><img src="https://blog.ziiyc.com/images/20240516154929.png"></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><span id="more"></span> 

<ul>
<li>右键Python插件，选择安装另一个版本，选择版本：<code>2022.2.1924087327</code><br><img src="https://blog.ziiyc.com/images/20240516163121.png"></li>
</ul>
<p><img src="https://blog.ziiyc.com/images/20240516155231.png"></p>
<p>如果同时需要使用Pylance，则需要将Pylance安装为同时期发布的版本，比如：<code>2022.2.4</code>，否则会产生以下报错：<code>Couldn&#39;t start client Python Tools</code></p>
<p><img src="https://blog.ziiyc.com/images/20240516155533.png"></p>
<blockquote>
<p>Request initialize failed with message: You may install and use any number of copies of the software only with Microsoft Visual Studio, Visual Studio for Mac, Visual Studio Code, Azure DevOps, Team Foundation Server, and successor Microsoft products and services (collectively, the “Visual Studio Products and Services”) to develop and test your applications. The software is licensed, not sold. This agreement only gives you some rights to use the software. Microsoft reserves all other rights. You may not: work around any technical limitations in the software that only allow you to use it in certain ways; reverse engineer, decompile or disassemble the software, or otherwise attempt to derive the source code for the software, except and to the extent required by third party licensing terms governing use of certain open source components that may be included in the software; remove, minimize, block, or modify any notices of Microsoft or its suppliers in the software; use the software in any…</p>
</blockquote>
]]></content>
      <tags>
        <tag>开发</tag>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows中硬链接、软链接、符号链接区别与使用场景</title>
    <url>/post/windows-links.html</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li><p>硬链接：Hard Link, 只适用于文件<br>适用条件：NTFS文件系统,不能跨盘符,使用绝对路径<br>使用效果：硬链接文件与目标文件必须位于同一volume,删除硬链接文件，不影响目标文件,删除目标文件，不影响硬链接文件(此时硬链接会保留目标文件的副本),当移动目标文件时，硬链接会重新指向新路径。</p>
</li>
<li><p>软链接：只用适用于目录<br>适用条件：NTFS文件系统,不能跨主机,使用绝对路径<br>使用效果：删除软链接，不影响目标文件夹,删除目标文件夹，软链接失效</p>
</li>
<li><p>符号链接：支持目录和文件<br>适用条件：NTFS文件系统，支持相对路径,支持UNC路径、网络驱动器。<br>使用效果：删除符号链接(文件或者目录)，不影响目标(文件或者目录),删除目标(文件或者目录),符号链接失效</p>
</li>
</ul>
<span id="more"></span> 

<h2 id="CMD实现"><a href="#CMD实现" class="headerlink" title="CMD实现"></a>CMD实现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 创建硬链接</span><br><span class="line">mklink /H 硬链接文件 目标文件</span><br><span class="line">; 创建软链接</span><br><span class="line">mklink /j 软链接文件夹 目标文件夹</span><br><span class="line">; 创建符号链接</span><br><span class="line">mklink 符号链接文件或文件夹 目标文件或文件夹</span><br></pre></td></tr></table></figure>

<h2 id="PowerShell实现"><a href="#PowerShell实现" class="headerlink" title="PowerShell实现"></a>PowerShell实现</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 创建硬链接</span></span><br><span class="line">New-Item -ItemType HardLink -Path 硬链接文件所在目录 -Name 硬链接文件名 -Target 目标文件全路径<span class="string">&quot;</span></span><br><span class="line"><span class="meta"># 创建软链接</span></span><br><span class="line">New-Item -ItemType Junction -Path 软链接文件夹 -Value 目标文件夹</span><br><span class="line"><span class="meta"># 创建符号链接</span></span><br><span class="line">New-Item -ItemType SymbolicLink -Path 符号链接文件或文件夹  -Value 目标文件或文件夹</span><br></pre></td></tr></table></figure>

<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><ul>
<li>硬链接：在scoop包管理器中大量使用,个人不常用</li>
<li>软链接：在不改变配置的情况下，将文件夹同步至OneDrive</li>
<li>符号链接：在不改变配置的情况下，将文件同步至OneDrive</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>文件系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows HyperV搭建Sunshine游戏串流服务</title>
    <url>/post/windows-hyperv-sunshine.html</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>工作电脑是台式机，7x24开机，加装了48G内存(共64G)，1TB固态，并替换显卡为1660S，希望通过虚拟机隔离工作和游戏环境，充分利用硬件资源，所以研究了这个方案，已经稳定运行半年了。</p>
<p>宿主基本情况：</p>
<ul>
<li><p>CPU：i5-10400</p>
</li>
<li><p>内存：64G</p>
</li>
<li><p>显卡：GTX 1660S 6G</p>
</li>
<li><p>驱动版本：566.14</p>
</li>
<li><p>系统： Win11 23H2 Pro</p>
<h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2></li>
<li><p>CPU：6核</p>
</li>
<li><p>内存：8G</p>
</li>
<li><p>显卡：<a href="https://lingkang.top/archives/hyper-v-gpu">hyper-v共享宿主显卡</a></p>
</li>
<li><p>系统：Win11 23H2 Pro</p>
<h3 id="软件环境搭建"><a href="#软件环境搭建" class="headerlink" title="软件环境搭建"></a>软件环境搭建</h3></li>
<li><p>系统激活：<a href="https://massgrave.dev/">massgrave.dev</a></p>
</li>
<li><p>安装游戏运行库：<a href="https://www.mefcl.com/grlpackage.html">游戏常用运行库合集</a></p>
</li>
<li><p>串流服务端 <a href="https://github.com/LizardByte/Sunshine">LizardByte/Sunshine</a></p>
<ul>
<li>使用虚拟声卡：VBCable驱动</li>
<li>！！！不要使用虚拟显示器：使用虚拟显示器进行串流会导致GPU识别异常（详情见FAQ）</li>
<li>修改版服务端：<a href="https://github.com/qiin2333/Sunshine-Foundation">qiin2333/Sunshine-Foundation</a> </li>
</ul>
</li>
<li><p>[可选]frp实现公网串流: <a href="https://github.com/koho/frpmgr">koko/frpmgr</a></p>
<ul>
<li>端口<ul>
<li>udp 47999 48000 48002 48010</li>
<li>tcp 47984 47989 48010</li>
</ul>
</li>
</ul>
</li>
<li><p>[可选]开启OpenSSH Server</p>
</li>
<li><p>[可选]串流时共享宿主键鼠 <a href="https://github.com/deskflow/deskflow">deskflow</a></p>
</li>
<li><p>[可选]使用沙盒工具：避免运行一些恶意程序导致系统异常 <a href="https://github.com/sandboxie-plus/Sandboxie">sandboxie-plus/Sandboxie</a> </p>
</li>
<li><p>[可选] 关闭Defender</p>
<ul>
<li>关闭：Windows 安全中心 -&gt; 主页 -&gt; 防火墙和网络保护（全部关闭）</li>
<li>使用工具 <a href="https://www.sordum.org/9480/defender-control-v2-1/">defender-control</a> 禁用Defender</li>
<li>禁用安全中心通知：打开组策略 -&gt; 计算机配置 -&gt; 管理模板 -&gt; Windows 组件 -&gt; Windows 安全中心 -&gt; 通知  -&gt; 启用：隐藏所有通知</li>
</ul>
</li>
<li><p>[可选]Steam</p>
</li>
</ul>
<h3 id="串流客户端工具列表"><a href="#串流客户端工具列表" class="headerlink" title="串流客户端工具列表"></a>串流客户端工具列表</h3><ul>
<li>Windows<ul>
<li>官方版 <a href="https://github.com/moonlight-stream/moonlight-qt">moonlight-stream/moonlight-qt</a></li>
</ul>
</li>
<li>Android<ul>
<li><a href="https://github.com/Axixi2233/moonlight-android">Axixi2233/moonlight-android</a> 目前在用，能够实现键盘原生输入（通过无障碍），界面比原版更加美观</li>
<li><a href="https://github.com/qiin2333/moonlight-android">qiin2333/moonlight-android</a> 威力加强版，加了不少特性并且是二次元图标和界面（不能修改图片、壁纸，个人不是很喜欢）</li>
<li>官方版 <a href="https://github.com/moonlight-stream/moonlight-android">moonlight-stream/moonlight-android</a><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2></li>
</ul>
</li>
</ul>
<h3 id="24H2运行部分破解游戏运行闪退"><a href="#24H2运行部分破解游戏运行闪退" class="headerlink" title="24H2运行部分破解游戏运行闪退"></a>24H2运行部分破解游戏运行闪退</h3><p>已知游戏列表：</p>
<ul>
<li>霍格沃茨之遗</li>
</ul>
<p>原因：24H2系统问题，使用23H2正常运行</p>
<h3 id="Yuzu、Ryujinx等Switch模拟器无法识别到GPU"><a href="#Yuzu、Ryujinx等Switch模拟器无法识别到GPU" class="headerlink" title="Yuzu、Ryujinx等Switch模拟器无法识别到GPU"></a>Yuzu、Ryujinx等Switch模拟器无法识别到GPU</h3><ul>
<li>需要使用原版Sunshine</li>
<li>如果任务管理器没有出现GPU，则需要退出所有远程会话的情况下重新添加GPU</li>
</ul>
<h3 id="串流画面卡住但有声音，能操作"><a href="#串流画面卡住但有声音，能操作" class="headerlink" title="串流画面卡住但有声音，能操作"></a>串流画面卡住但有声音，能操作</h3><p>情况说明：</p>
<ul>
<li>宿主通过smb3通过<strong>专用虚拟交换机</strong>共享游戏目录到HyperV虚拟机，使用共享目录打开游戏</li>
</ul>
<p>解决方式：</p>
<ul>
<li>宿主机关闭硬件加速gpu –&gt; 延长了问题出现的时间，有效果，但没有解决</li>
<li><strong>不使用网络共享，使用独立VHDX虚拟磁盘 –&gt; 改用后cpu占用率下降明显，并且玩了半小时多没有复现问题</strong></li>
</ul>
<h3 id="RDP后无法使用串流服务的问题"><a href="#RDP后无法使用串流服务的问题" class="headerlink" title="RDP后无法使用串流服务的问题"></a>RDP后无法使用串流服务的问题</h3><p>建议：不要使用远程桌面，可以考虑用RustDesk替代，相关文章：<a href="https://www.bilibili.com/read/cv16102714/">远程控制 解决RDP后无法使用moonlight等服务的问题 RDP断开时解锁主机</a></p>
]]></content>
      <tags>
        <tag>自建服务</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows同步阅读Kindle个人文档方案</title>
    <url>/post/windows-read-kindle-documents.html</url>
    <content><![CDATA[<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul>
<li>2018-8-31：第一个版本</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，Kindle支持在安卓和IOS设备中同步阅读个人文档，但Kindle for PC并不支持。</p>
<h3 id="网上找到的解决方案如下："><a href="#网上找到的解决方案如下：" class="headerlink" title="网上找到的解决方案如下："></a>网上找到的解决方案如下：</h3><ol>
<li>将书籍放到My Kindle Content中阅读</li>
<li>Chrome ARC Welder安装Kindle</li>
<li>使用安卓模拟器</li>
</ol>
<h3 id="首先分析以上三种方案"><a href="#首先分析以上三种方案" class="headerlink" title="首先分析以上三种方案"></a>首先分析以上三种方案</h3><p>方案一：可以打开并阅读书籍，但书签，笔记，阅读进度不能同步。（不可行）</p>
<p>方案二：可以打开并登录Kindle，非常卡顿，而且在阅读界面会崩溃。（不可行）</p>
<p>方案三：虚拟一个安卓系统，但存在一些阅读便捷性问题，我的方案主要解决的是一些阅读便捷性问题。（可行）</p>
<span id="more"></span> 

<h2 id="我的方案"><a href="#我的方案" class="headerlink" title="我的方案"></a>我的方案</h2><p>准备工具：</p>
<ol>
<li><a href="https://en.bignox.com/">Nox 夜神模拟器海外版</a>，我使用的版本是6.0.5.2，这版本默认是绿色便携版，可放在U盘中使用。</li>
<li><a href="https://autohotkey.com/">AutoHotKey</a>，使用官方最新版</li>
</ol>
<p>解决的问题：</p>
<ol>
<li>Kindle阅读时使用鼠标滚动翻页</li>
<li>使用鼠标中键单击返回</li>
<li>使用鼠标中键双击最近任务</li>
<li>使用鼠标中键长按后释放返回主页</li>
<li>两种鼠标中键滚轮模式切换：阅读模式和常规模式</li>
</ol>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="comment">;=====================================================================</span></span><br><span class="line"><span class="comment">;           按住右键+鼠标滚轮往上:音量加                             </span></span><br><span class="line"><span class="comment">;                    鼠标滚轮往上:向上滚动                           </span></span><br><span class="line"><span class="comment">;           按住右键+鼠标滚轮往下:音量减                             </span></span><br><span class="line"><span class="comment">;                    鼠标滚轮往下:向下滚动                           </span></span><br><span class="line"><span class="comment">;                    鼠标中键单击:返回键                             </span></span><br><span class="line"><span class="comment">;                    鼠标中键双击:最近任务                           </span></span><br><span class="line"><span class="comment">;                    鼠标中键长按:主页键                             </span></span><br><span class="line"><span class="comment">;           按住右键+鼠标中键长按:模式切换(阅读模式和常规模式)       </span></span><br><span class="line"><span class="comment">;           按住右键+鼠标中键长按:Nox全屏</span></span><br><span class="line"><span class="comment">;           阅读模式:在Nox中,鼠标滚轮代表音量加减,用于翻页                </span></span><br><span class="line"><span class="comment">;           常规模式:鼠标滚轮为正常上下滚动   </span></span><br><span class="line"><span class="comment">;                      zzz-2018.08.31                                </span></span><br><span class="line"><span class="comment">;---------------------------------------------------------------------                                                                                  </span></span><br><span class="line"><span class="meta">#IfWinActive ahk_exe Nox.exe                                         </span></span><br><span class="line">&#123;                                                                    </span><br><span class="line">Flag:=<span class="literal">false</span>                                                          </span><br><span class="line"><span class="title">MButton::</span>                                                            </span><br><span class="line">if pressesCount &gt; <span class="number">0</span> <span class="comment">; ＞0说明SetTimer 已经启动了，按键次数递增       </span></span><br><span class="line">&#123;                                                                    </span><br><span class="line">    pressesCount += <span class="number">1</span>                                                </span><br><span class="line">    <span class="keyword">return</span>                                                           </span><br><span class="line">&#125;                                                                    </span><br><span class="line"><span class="comment">;否则，这是新一系列按键的首次按键。将计数设重置为 1 ，并启动定时器： </span></span><br><span class="line">pressesCount = <span class="number">1</span>                                                     </span><br><span class="line"><span class="built_in">SetTimer,</span> WaitKey, <span class="number">500</span> <span class="comment">;在 500 毫秒内等待更多的按键。                </span></span><br><span class="line"><span class="keyword">return</span>                                                               </span><br><span class="line">                                                                     </span><br><span class="line"><span class="title">WaitKey:</span>                                                             </span><br><span class="line"><span class="built_in">KeyWait,</span> MButton                                                     </span><br><span class="line">If (<span class="built_in">A_TimeSinceThisHotkey</span> &gt; <span class="number">500</span>)                                     </span><br><span class="line">	&#123;                                                                </span><br><span class="line"><span class="built_in">	send,</span>&#123;Home&#125;                                                      </span><br><span class="line"><span class="built_in">	SetTimer,</span> WaitKey, off                                           </span><br><span class="line">	pressesCount = <span class="number">0</span>                                                 </span><br><span class="line">	<span class="keyword">return</span>                                                           </span><br><span class="line">	&#125;                                                                </span><br><span class="line"><span class="built_in">SetTimer,</span> WaitKey, off                                               </span><br><span class="line">if pressesCount = <span class="number">1</span> <span class="comment">;该键已按过一次。                                </span></span><br><span class="line">&#123;                                                                    </span><br><span class="line">    <span class="keyword">Gosub</span> singleClick                                                </span><br><span class="line">&#125;                                                                    </span><br><span class="line">else if pressesCount = <span class="number">2</span> <span class="comment">;该键已按过两次。                           </span></span><br><span class="line">&#123;                                                                    </span><br><span class="line">	<span class="keyword">Gosub</span> doubleClick                                                </span><br><span class="line">&#125;                                                                     </span><br><span class="line"><span class="comment">;不论上面哪个动作被触发，将计数复位以备下一系列的按键：              </span></span><br><span class="line">pressesCount = <span class="number">0</span>                                                     </span><br><span class="line"><span class="keyword">return</span>                                                               </span><br><span class="line">                                                                     </span><br><span class="line"><span class="title">singleClick:</span>                                                         </span><br><span class="line">if GetKeyState(<span class="string">&quot;RButton&quot;</span>) = <span class="number">0</span>                                        </span><br><span class="line"><span class="built_in">	Send,</span> &#123;ESC&#125;                                                      </span><br><span class="line">else                                                                 </span><br><span class="line">&#123;                                                                    </span><br><span class="line">	if(Flag:=!Flag)                                                  </span><br><span class="line">	&#123;                                                                </span><br><span class="line"><span class="title">		wheelup::</span>                                                    </span><br><span class="line">		if GetKeyState(<span class="string">&quot;RButton&quot;</span>) = Flag                             </span><br><span class="line"><span class="built_in">			Send,</span> &#123;wheelup&#125;                                          </span><br><span class="line">		else                                                         </span><br><span class="line"><span class="built_in">			send,</span> ^<span class="number">6</span>                                                 </span><br><span class="line">		<span class="keyword">return</span>                                                       </span><br><span class="line"><span class="title">		wheeldown::</span>                                                  </span><br><span class="line">		if GetKeyState(<span class="string">&quot;RButton&quot;</span>) = Flag                             </span><br><span class="line"><span class="built_in">			Send,</span> &#123;wheeldown&#125;                                        </span><br><span class="line">		else                                                         </span><br><span class="line"><span class="built_in">			send,</span> ^<span class="number">7</span>                                                 </span><br><span class="line">		<span class="keyword">return</span>                                                       </span><br><span class="line">	&#125;                                                                </span><br><span class="line">&#125;                                                                    </span><br><span class="line"><span class="keyword">return</span>                                                               </span><br><span class="line">                                                                     </span><br><span class="line"><span class="title">doubleClick:</span>                                                         </span><br><span class="line">if GetKeyState(<span class="string">&quot;RButton&quot;</span>) = <span class="number">0</span>                                        </span><br><span class="line"><span class="built_in">	Send,</span> &#123;End&#125;                                                      </span><br><span class="line">else                                                                 </span><br><span class="line"><span class="built_in">	send,</span> ^<span class="number">5</span>                                                         </span><br><span class="line"><span class="keyword">return</span>                                                               </span><br><span class="line">                                                                     </span><br><span class="line">&#125;                                                                    </span><br><span class="line"><span class="comment">;---------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>AHK应用</tag>
        <tag>Kinlde个人文档</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows代码编辑器选择-VSCode</title>
    <url>/post/vscode.html</url>
    <content><![CDATA[<h2 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h2><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>优点：</p>
<ul>
<li>界面美观</li>
<li>扩展强大</li>
<li>代码高亮</li>
<li>启动速度快</li>
</ul>
<p>缺点：</p>
<ul>
<li>AHK中文无法对齐</li>
<li>Alt多选需要在设置中设置为Ctrl/Command，体验极差</li>
</ul>
<h3 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h3><p>缺点：</p>
<ul>
<li>界面不美观</li>
<li>文件不能自动关联</li>
</ul>
<h3 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h3><p>缺点：</p>
<ul>
<li>Windows不支持Alt多选</li>
<li>闭源</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>gcp安装配置Hexo</title>
    <url>/post/gcp-hexo.html</url>
    <content><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol>
<li>从2016年建立个人博客开始使用Wordpress，了解Wordpress强大的同时，也认识到Wordpress的繁琐，最烦恼的是数据库文章的问题，比如说Wordpress文章ID不连续，在使用Google Cloud Platform后数据库时不时无法连接。</li>
<li>相比于Wordpress,Hexo属于静态博客，所有源数据都放在本地，生成网站数据后发布到网上，虽然过程相对繁琐，但访问速度快，使用Github Pages后相当于无限流量。</li>
</ol>
<span id="more"></span> 

<h2 id="搭建Hexo博客"><a href="#搭建Hexo博客" class="headerlink" title="搭建Hexo博客"></a>搭建Hexo博客</h2><h3 id="1-登录Google-Cloud-Platform（即GCP）-Compute-Engine-链接"><a href="#1-登录Google-Cloud-Platform（即GCP）-Compute-Engine-链接" class="headerlink" title="1. 登录Google Cloud Platform（即GCP）:Compute Engine(链接)"></a>1. 登录Google Cloud Platform（即GCP）:<a href="https://console.cloud.google.com/compute/">Compute Engine(链接)</a></h3><h3 id="2-创建实例"><a href="#2-创建实例" class="headerlink" title="2. 创建实例"></a>2. 创建实例</h3><p><img src="https://blog.ziiyc.com/images/813e7236cfc628080c4f59b8f5939411_MD5.png" alt="gcp-1.png"></p>
<p><img src="https://blog.ziiyc.com/images/7c9fe3ea781f9e6d3ce478b832eef1a6_MD5.png" alt="gcp-2.png"></p>
<p>拉到最下面确认创建新实例，创建后自动启动实例：</p>
<p><img src="https://blog.ziiyc.com/images/0b80c9862883ea2946ddcbe132691bf9_MD5.png" alt="gcp-3.png"></p>
<p>启用实例的SSH：</p>
<p><img src="https://blog.ziiyc.com/images/6ea5de4c00c0b2353964e4951eaac48a_MD5.png" alt="gcp-4.png"></p>
<ol>
<li><p>使用sudo passwd设置Root密码</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">sudo passwd <span class="comment">//设置Root密码</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过sudo su命令切换到root用户</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sudo su <span class="comment">//切换到root用户</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改SSH配置文件/etc/ssh/sshd_config</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config <span class="comment">//编辑文件</span></span><br></pre></td></tr></table></figure></li>
<li><p>找到PermitRootLogin和PasswordAuthentication</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">LoginGraceTime <span class="number">120</span></span><br><span class="line">PermitRootLogin yes <span class="comment">//默认为no，需要开启root用户访问改为yes</span></span><br><span class="line">StrictModes yes</span><br><span class="line">PasswordAuthentication yes <span class="comment">//默认为no，改为yes开启密码登陆</span></span><br></pre></td></tr></table></figure></li>
<li><p>重启SSH服务使修改生效，Ubuntu同样适用</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-查看当前Git版本"><a href="#3-查看当前Git版本" class="headerlink" title="3. 查看当前Git版本"></a>3. 查看当前Git版本</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git <span class="attr">--verison</span></span><br></pre></td></tr></table></figure>
<h3 id="4-安装Node-js"><a href="#4-安装Node-js" class="headerlink" title="4. 安装Node.js"></a>4. 安装Node.js</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs -y</span><br><span class="line">sudo apt-get install npm -y</span><br></pre></td></tr></table></figure>

<h3 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5. 安装Hexo"></a>5. 安装Hexo</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">npm install -g cli</span><br></pre></td></tr></table></figure>

<h4 id="5-1-配置Hexo"><a href="#5-1-配置Hexo" class="headerlink" title="5.1 配置Hexo"></a>5.1 配置Hexo</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"># 进入想要存放博客的文件夹</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p><em>报错：npm WARN optional Skipping failed optional dependency /chokidar/fsevents:<br>npm WARN notsup Not compatible with your operating system or architecture: <a href="mailto:&#102;&#115;&#101;&#x76;&#101;&#110;&#116;&#x73;&#64;&#49;&#46;&#49;&#46;&#51;">&#102;&#115;&#101;&#x76;&#101;&#110;&#116;&#x73;&#64;&#49;&#46;&#49;&#46;&#51;</a><br>原因：fsevent是mac osx系统的，你是在win或者Linux下使用了 所以会有警告，忽略即可</em></p>
<h4 id="5-2-安装主题"><a href="#5-2-安装主题" class="headerlink" title="5.2 安装主题"></a>5.2 安装主题</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"># 进入主题文件夹themes</span><br><span class="line">git clone https:<span class="comment">//github.com/theme-next/theme-next</span></span><br><span class="line"># 修改配置文件_config.yml，在theme字段中填入：theme-next即可</span><br><span class="line">vi _config.yml</span><br></pre></td></tr></table></figure>
<h3 id="5-3-启动Hexo"><a href="#5-3-启动Hexo" class="headerlink" title="5.3 启动Hexo"></a>5.3 启动Hexo</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line"># 启动后在浏览器的地址栏填入：ip:<span class="number">4000</span>即可启动</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>VPS</tag>
        <tag>Google Cloud Platform</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>nextcloud-uploader：文件上传Nextcloud获取内部链接</title>
    <url>/post/nextcloud-uploader.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>最近改造Obsidian附件管理，使用自建的Nextcloud作为附件存储，所以有了一个需求，右键文件上传至Nextcloud并获取内部链接（为什么不使用外部链接呢？因为笔记属于重要资料性质，采用内部链接更能保证附件的保密性），因此自己使用Python开发的Windows下右键菜单上传至NextCloud并获取内部链接复制到剪贴板的工具。代码已经开源在Github上，欢迎大家使用。</p>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ul>
<li><a href="https://github.com/kkzzhizhou/nextcloud-uploader">nextcloud-uploader项目地址</a></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">scoop</span> bucket <span class="keyword">add</span> zapps https:<span class="comment">//github.com/kkzzhizhou/scoop-zapps</span></span><br><span class="line"><span class="symbol">scoop</span> install nextcloud-uploader</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>修改config.json文件, 放在程序的/data目录下，格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nextcloud_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;upload_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span> 
]]></content>
      <tags>
        <tag>效率工具</tag>
      </tags>
  </entry>
  <entry>
    <title>syncthing实现移动硬盘便携同步至NAS</title>
    <url>/post/Synchronize-Portable-External-Hard-Drive-With-NAS.html</url>
    <content><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://blog.ziiyc.com/images/f914eb06647f580253d63509f928b76f_MD5.png" alt="Synchronize-Portable-External-Hard-Drive-With-NAS-1.png"></p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一台黑群晖NAS设备和一个移动硬盘实现在资料自动同步</p>
<p>先说说传统方式有几种：</p>
<ul>
<li>将移动硬盘插入NAS的USB接口，并使用群晖应用USB Copy进行备份(注意：这种方式只能备份至移动硬盘，不能将移动硬盘上的更改同步到NAS中)</li>
<li>将移动硬盘插入局域网中的Windows设备，并使用samba挂载NAS文件夹，使用类似GoodSync，AllwaySync，SyncFolders等同步软件进行同步。</li>
</ul>
<p>我的需求：</p>
<ul>
<li>移动硬盘接入任何Windows设备中，在有网络的情况下（可以是局域网，可以是公网），都能直接与NAS中的文件夹进行同步。</li>
<li>即使移动硬盘在一段时间内不使用（比如说，不接任何设备闲置几天），重新接入网络能继续与NAS中的文件夹进行同步</li>
</ul>
<h2 id="可行解决方案：SyncTrayzor-Syncthing-GUI"><a href="#可行解决方案：SyncTrayzor-Syncthing-GUI" class="headerlink" title="可行解决方案：SyncTrayzor(Syncthing GUI)"></a>可行解决方案：SyncTrayzor(Syncthing GUI)</h2><span id="more"></span> 
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol>
<li><p>下载SyncTrayzor Portable版本，解压放置在移动硬盘根目录，命名为Syncthing(可以改成任何你想到的名字)</p>
</li>
<li><p>将硬盘盘符修改成一些不常用的的盘符，比方说P盘</p>
</li>
<li><p>打开Syncthing文件夹中的SyncTrayzor.exe，将设备名改成移动硬盘的盘符名（最好是有意义的）</p>
</li>
<li><p>添加远程设备NAS，去除勾选“作为中介”</p>
</li>
<li><p>将移动硬盘中的文件夹同步给ZNAS即可</p>
</li>
</ol>
<h2 id="插入新设备时"><a href="#插入新设备时" class="headerlink" title="插入新设备时"></a>插入新设备时</h2><ul>
<li>修改移动硬盘盘符为P盘（或者修改配置文件中的[盘符]:\Syncthing\data\syncthing\config.xml中的盘符位置)</li>
<li>打开SyncTrayzor即可同步</li>
</ul>
<h2 id="自动修改盘符脚本"><a href="#自动修改盘符脚本" class="headerlink" title="自动修改盘符脚本"></a>自动修改盘符脚本</h2><ul>
<li>将以下代码保存成start.ps1后打开即可</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$script_path</span> = <span class="built_in">Split-Path</span> <span class="literal">-Parent</span> <span class="variable">$MyInvocation</span>.MyCommand.Definition</span><br><span class="line"><span class="variable">$config</span> = <span class="string">&quot;<span class="variable">$script_path</span>\data\syncthing\config.xml&quot;</span></span><br><span class="line"><span class="variable">$drive_letter</span> = <span class="variable">$script_path</span>.Split(<span class="string">&#x27;\&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">write-host</span> <span class="string">&quot;正在修改盘符...&quot;</span> </span><br><span class="line"><span class="variable">$xml</span> = <span class="built_in">New-Object</span> <span class="literal">-TypeName</span> XML</span><br><span class="line"><span class="variable">$xml</span>.Load(<span class="variable">$config</span>)</span><br><span class="line"><span class="variable">$node</span>=<span class="variable">$xml</span>.SelectNodes(<span class="string">&quot;/configuration/folder&quot;</span>)</span><br><span class="line"><span class="built_in">write-host</span> <span class="string">&quot;旧盘符为:<span class="variable">$</span>&#123;node.path&#125;&quot;</span> </span><br><span class="line"><span class="variable">$node</span>.SetAttribute(<span class="string">&quot;path&quot;</span>, <span class="variable">$drive_letter</span>)</span><br><span class="line"><span class="built_in">write-host</span> <span class="string">&quot;新盘符为:<span class="variable">$drive_letter</span>&quot;</span></span><br><span class="line"><span class="variable">$xml</span>.Save(<span class="variable">$config</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$</span>?)&#123;</span><br><span class="line">    <span class="built_in">write-host</span> <span class="string">&quot;正在启动SyncTrayzor&quot;</span></span><br><span class="line">    <span class="built_in">Start-Process</span> <span class="variable">$script_path</span>\SyncTrayzor.exe</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>一款图表可视化，自定义强的记账软件：BlueCoins</title>
    <url>/post/bluecoins.html</url>
    <content><![CDATA[<h2 id="从体验记账App讲起"><a href="#从体验记账App讲起" class="headerlink" title="从体验记账App讲起"></a>从体验记账App讲起</h2><p>从高中到现在，断断续续记账，试用过不下10款App，如随手记，挖财，网易有钱，口袋记账等等，都使用过一段时间后卸载，原因各不相同，但卸载最最主要的原因是基础功能不完善，各种杂七杂八功能一堆。</p>
<h2 id="今天的主角：BlueCoins"><a href="#今天的主角：BlueCoins" class="headerlink" title="今天的主角：BlueCoins"></a>今天的主角：BlueCoins</h2><p>正如你所想的，今天的主角的将记账这件事做到极致，没有多余的功能，强大的图表显示功能，以及便捷的记录方式。它的出现让我心甘情愿花了一晚上研究他的功能。下面讲讲这款软件的功能特色。</p>
<span id="more"></span> 

<h2 id="主角光环-强大之处"><a href="#主角光环-强大之处" class="headerlink" title="主角光环-强大之处"></a>主角光环-强大之处</h2><ol>
<li>主面板华丽图表显示，让每日花费一目了然。</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/17a1c5bb6f9b650822b6c2bae314ec40_MD5.jpg" alt="bluecoins-1.jpg"></p>
<ol start="2">
<li>强大的提醒功能</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/fb2a1b1fd78114db62f25c6fbc316bfd_MD5.png" alt="bluecoins-2.png"></p>
<ol start="3">
<li>支持多国货币并自动汇率转换</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/17ae40cfe4793d733a23515dcb547506_MD5.jpg" alt="bluecoins-3.jpg"></p>
<ol start="4">
<li>支持与GoogleDrive同步</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/f5ded446fdc8387ed3003ea15d5e6884_MD5.png" alt="bluecoins-4.png"></p>
<ol start="5">
<li>支持自动填充</li>
</ol>
<p><strong>这个功能非常实用，基本上我们每天的花费都是重复的，如果在软件中已经记录过一笔，下次再记录的时候就非常方便了，这点是我在其他软件上没看到的。</strong></p>
<p><img src="https://blog.ziiyc.com/images/f5ded446fdc8387ed3003ea15d5e6884_MD5.png" alt="bluecoins-5.png"></p>
<h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><p>便是不能像网易有钱自动关联银行卡和支付宝进行自动记账操作，记账稍显繁琐。</p>
<p>不过坚持记录，本来就不是一件容易的事情，即使软件再优秀，自己想偷懒，记账的好习惯也是无法养成的。</p>
]]></content>
      <tags>
        <tag>记账</tag>
      </tags>
  </entry>
  <entry>
    <title>中国联通广东地区SSR云免流教程</title>
    <url>/post/ssr-mianliu.html</url>
    <content><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul>
<li>2018-4-5： 使用参数<strong>short.weixin.qq.com</strong>使用的是微信定向流量</li>
<li>2018-3-30：免流参数<strong>ylsh.gd10010.cn</strong>失效</li>
<li>2018-2-20：更新注意事项,配置参数,ssrscriptn使用方法</li>
<li>2018-1-11：免流参数<strong>ylsh.gd10010.cn</strong>可用</li>
<li>2017-11-7：免流参数<strong>aop.gd10010.cn</strong>失效</li>
</ul>
<h2 id="免流原理"><a href="#免流原理" class="headerlink" title="免流原理"></a>免流原理</h2><p>运营商为了给客户提供方便，提供了一些优惠政策，如：接收彩信、登陆掌厅免除流量费以及免收取流量费的其他业务。<br>运营商的计费系统为了区分用户使用的是免流量业务还是正常访问互联网会把这些免流服务的网址加入到白名单，这些白名单中的网址就是我们平常所说的免流IP了，当计费系统检测到用户访问的是白名单中的网址或接收彩信时就不会进行扣费。 </p>
<span id="more"></span> 

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li><strong>如果服务器长时间高速免流下载，联通会采取封IP的措施，切记</strong></li>
<li><strong>此次分享是中国联通免流的教程，中国移动，中国电信不可用</strong></li>
</ul>
<!-- more --> 

<h2 id="免流教程"><a href="#免流教程" class="headerlink" title="免流教程"></a>免流教程</h2><ol>
<li>首先，你得有一台VPS，<del>带宽建议大于100M</del>，如果需要免流顺带科学上网，可以考虑购买国外的VPS。</li>
<li>用SSH软件（如xshell,putty等）登录VPS。执行一键安装脚本<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wget http:<span class="comment">//cdn.yunmaopt.cc/jiaoben.sh &amp;&amp; bash jiaoben.sh</span></span><br></pre></td></tr></table></figure></li>
<li>在提示界面中安装<strong>SSR一键安装</strong>，端口选择<strong>443</strong></li>
<li>在提示界面中安装 <strong>Gost一键安装</strong>，密码和端口自定义。</li>
<li>手机端使用SSR时，正常配置SSR连接，还需要在混淆插件（OSBF为http_simple）下配置混淆参数为<del>aop.gd10010.cn</del>  <strong>ylsh.gd10010.cn</strong>，配置SSR为<strong>全局模式以及UDP转发</strong>。<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">SSR+关键配置如下（其余参数默认即可）：</span><br><span class="line">服务器：填写服务器IP地址</span><br><span class="line">远程端口：<span class="number">443</span></span><br><span class="line">密码：SSR密码</span><br><span class="line">加密方式：chacha20</span><br><span class="line">协议：auth_sha1_v4</span><br><span class="line">混淆方式：http_simple</span><br><span class="line">混淆参数：ylsh.gd10010.cn</span><br><span class="line">UDP代理方式：通过TCP转发</span><br><span class="line">UDP代理规则：全局代理</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="共享SSR网络（需Root）"><a href="#共享SSR网络（需Root）" class="headerlink" title="共享SSR网络（需Root）"></a>共享SSR网络（需Root）</h2><p>在使用官方的SSR免流时，启用手机热点，其他设备是无法正常上网的。<br>需要使用<strong>ssrscriptn</strong>这款软件来进行SSR连接。</p>
<p><img src="https://blog.ziiyc.com/images/903bc0566571c5bb91a0672f132c10bd_MD5.png" alt="ssr-mianliu-1.png"></p>
]]></content>
      <tags>
        <tag>云免流</tag>
        <tag>SSR</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Nextcloud+Syncthing同步Obsidian资料库</title>
    <url>/post/nextcloud-syncthing-sync-obsidian.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在不使用官方的Obsidian Sync的情况下，在移动设备如Android、IOS上进行笔记同步是比较麻烦的事情，看过不少文章使用各种方式进行同步，比如以下：</p>
<ul>
<li><a href="https://sspai.com/post/65316">Obsidian 的 Android 伴侣：GitJournal 使用指南</a> 需要使用Git，并且目前已经有官方的Obsidian Android/IOS客户端</li>
<li><a href="https://bugeshan.com/manual/obsidian-sync-guide-20210713/">Obsidian 多端同步简明指南</a>  完全使用Syncthing的情况下，可以在PC和移动设备间同步，但在设备较多的情况下，会出现大量的同步冲突文件，体验不友好</li>
<li>[<a href="https://zhuanlan.zhihu.com/p/402587731]">https://zhuanlan.zhihu.com/p/402587731]</a>(Obsidian Windows与安卓端同步) 使用Onedrive+FolderSync在PC和Android间同步，但FolderSync同步效率极慢，但文件数量多的情况下，体验很差（比如1000个文件，完全同步需要1分钟）</li>
</ul>
<p>综上，本人使用Nextcloud和Syncthing在PC端和移动设备进行笔记的同步，使用inotifywait监控两边目录改动，运行nextcloudcmd命令进行同步。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>自建NextCloud服务端</li>
<li>自建Syncthing服务</li>
<li>安装nextcloudcmd、inotifywait</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>运行以下脚本即可，说明：</p>
<ul>
<li>填入参数即可</li>
<li>启动命令： <code>bash nextcloud-sync.sh start</code></li>
<li>停止命令： <code>bash nextcloud-sync.sh stop</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line"><span class="comment"># author: kkzzhizhou</span></span><br><span class="line"><span class="comment"># desc: nextcloud inotify sync script.</span></span><br><span class="line"><span class="comment"># This script is a wrapper around nextcloudcmd, designed to keep a local directory synchronised with a Nextcloud repository.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Usage: nextcloud-sync.sh configfile</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The config file must contain &quot;username&quot;, &quot;password&quot;, &quot;local&quot; directory and &quot;remote&quot; URL to a Nextcloud service. </span></span><br><span class="line"></span><br><span class="line">PROG=$(<span class="built_in">basename</span> <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span><br><span class="line">PROGDIR=$(<span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span> &amp;&amp; <span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="built_in">set</span> -u</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"></span><br><span class="line">USERNAME=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">PASSWORD=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">LOCAL_DIR=<span class="string">&quot;xxx&quot;</span> <span class="comment"># 本地Syncthing文件夹路径</span></span><br><span class="line">REMOTE_URI=<span class="string">&quot;https://xxx&quot;</span> <span class="comment"># 填写Nextcloud服务地址</span></span><br><span class="line">DAVPATH=<span class="string">&quot;Notes&quot;</span></span><br><span class="line">NEXTCLOUD_DATA_DIR=<span class="string">&#x27;xxx&#x27;</span>  <span class="comment"># 填写Nextcloud用户数据路径</span></span><br><span class="line">NEXTCLOUD_DIR=<span class="string">&quot;<span class="variable">$NEXTCLOUD_DATA_DIR</span>/<span class="variable">$USERNAME</span>/files/<span class="variable">$DAVPATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span> </span><br><span class="line">    start)</span><br><span class="line">        <span class="built_in">echo</span> 0 &gt; <span class="string">&quot;<span class="variable">$PROGDIR</span>/sync.lock&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;start monitoring: <span class="variable">$&#123;LOCAL_DIR&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;start monitoring: <span class="variable">$&#123;NEXTCLOUD_DIR&#125;</span>&quot;</span></span><br><span class="line">        /usr/bin/inotifywait -mrq --exclude <span class="string">&#x27;/\..*&#x27;</span> --timefmt <span class="string">&#x27;%d/%m/%y %H:%M:%S&#x27;</span> --format <span class="string">&#x27;%T %w %f %e&#x27;</span> -e modify,delete,create <span class="string">&quot;<span class="variable">$LOCAL_DIR</span>&quot;</span> -o <span class="variable">$PROGDIR</span>/inotify.log -d</span><br><span class="line">        /usr/bin/inotifywait -mrq --exclude <span class="string">&#x27;/\..*&#x27;</span> --timefmt <span class="string">&#x27;%d/%m/%y %H:%M:%S&#x27;</span> --format <span class="string">&#x27;%T %w %f %e&#x27;</span> -e modify,delete,create <span class="variable">$&#123;NEXTCLOUD_DIR&#125;</span> -o <span class="variable">$PROGDIR</span>/inotify.log -d</span><br><span class="line">        <span class="built_in">nohup</span> /usr/bin/inotifywait -mq --timefmt <span class="string">&#x27;%d/%m/%y %H:%M:%S&#x27;</span> --format <span class="string">&#x27;%T %w %f %e&#x27;</span> -e modify <span class="variable">$PROGDIR</span>/inotify.log | <span class="keyword">while</span> <span class="built_in">read</span> file </span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            last_sync_timestamp=$(<span class="built_in">cat</span> <span class="variable">$PROGDIR</span>/sync.lock)</span><br><span class="line">            current_timestamp=$(<span class="built_in">date</span> +%s)</span><br><span class="line">            timestamp_check=$[<span class="variable">$last_sync_timestamp</span> + 10]</span><br><span class="line">            <span class="keyword">if</span> [ <span class="variable">$timestamp_check</span> -lt <span class="variable">$current_timestamp</span> ];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$current_timestamp</span> &gt; <span class="string">&quot;<span class="variable">$PROGDIR</span>/sync.lock&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$current_timestamp</span>: sync was started&quot;</span></span><br><span class="line">                nextcloudcmd -s --non-interactive --user <span class="string">&quot;<span class="variable">$USERNAME</span>&quot;</span> --password <span class="string">&quot;<span class="variable">$PASSWORD</span>&quot;</span> --path <span class="string">&quot;<span class="variable">$DAVPATH</span>&quot;</span> <span class="string">&quot;<span class="variable">$LOCAL_DIR</span>&quot;</span> <span class="string">&quot;<span class="variable">$REMOTE_URI</span>&quot;</span></span><br><span class="line">            <span class="comment">#else</span></span><br><span class="line">                <span class="comment">#echo &quot;$current_timestamp: sync ignored&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span> &gt; <span class="string">&quot;<span class="variable">$PROGDIR</span>/sync.log&quot;</span> &amp; 2&gt;&amp;1</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;stop all monitoring&quot;</span></span><br><span class="line">        pkill inotifywait</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>实践</tag>
      </tags>
  </entry>
  <entry>
    <title>使用OneDrive实时同步Ditto剪贴板数据（WebDav）</title>
    <url>/post/onedrive-sync-ditto.html</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近将常用的绿色软件放到Onedrive中同步，方便在自己的多个Windows设备使用。遇到一个比较棘手的问题，使用Ditto时会锁定数据库文件，此时OneDrive显示文件在使用中，无法同步。</p>
<span id="more"></span> 

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用WebDav连接OneDrive</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>OneDrive使用WebDav的方法：</p>
<ol>
<li>访问 <a href="http://onedrive.com/">OneDrive.com</a> ，点击进入任何一个你的文件夹。</li>
<li>看浏览器上面的地址栏，“cid”后面的一串完整的数字加大写的英文字母叫 special ID（如下图）。</li>
<li>你的入口链接就是： special ID（如我的就是<a href="https://d.docs.live.net/F399A8134684152B%EF%BC%89%EF%BC%8C%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E5%B0%B1%E6%98%AF%E4%BD%A0%E5%BE%AE%E8%BD%AF%E8%B4%A6%E5%8F%B7%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81">https://d.docs.live.net/F399A8134684152B），账号密码就是你微软账号的账号密码</a><ul>
<li>如果你有<strong>开启两步验证</strong>功能，那么需要在<a href="https://account.live.com/proofs/AppPassword?mkt=en-us">这里去获得一个生成的应用密码</a></li>
<li>另外要注意的，OneDrive 的 WebDav 接口如同坚果云的一样，传输的文件大小限制在100M以下。</li>
</ul>
</li>
<li>在资源管理器界面中，选择映射网络驱动器，在文件夹一栏，填入上一步得到的地址，点击完成，耐心等候，输入账号密码即可，之后可以将这个映射得到的盘符当作本地磁盘进行使用</li>
</ol>
<p>连接后如下图所示，打开即为你网盘的文件</p>
<p><img src="https://blog.ziiyc.com/images/e50d37e41deb7aee0a96a29f9d91ed60_MD5.jpg" alt="onedrive-sync-ditto-1.jpg"></p>
<p>Ditto设置如下图所示，数据库使用WebDav路径即可完美解决数据同步问题</p>
<p><img src="https://blog.ziiyc.com/images/a3f64609e0d33a8d2db9dd9861a1fdde_MD5.jpg" alt="onedrive-sync-ditto-2.jpg"></p>
]]></content>
      <tags>
        <tag>webdav应用</tag>
      </tags>
  </entry>
  <entry>
    <title>便携软件实现开机后台自启</title>
    <url>/post/portableapps-auto-start.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用过便携软件不知是否留意过，便携软件设计的初衷是为了在软件工作在U盘上，为了“不给系统留下痕迹”，故去除了开机自启，文件关联机制，响应系统注销、关机、重启事件，右键菜单。</p>
<p>但是，使用便携软件的目的是为了重装安装系统不用重装安装软件，并且保留个人使用数据。而便携软件不能实现的功能是日常使用软件的刚需。</p>
<p>所以便有了以下的探讨。</p>
<span id="more"></span> 

<h2 id="实现便携软件开机后台自启（以AirExplorer-Portable为例）"><a href="#实现便携软件开机后台自启（以AirExplorer-Portable为例）" class="headerlink" title="实现便携软件开机后台自启（以AirExplorer Portable为例）"></a>实现便携软件开机后台自启（以AirExplorer Portable为例）</h2><p>实现功能：</p>
<ol>
<li>响应系统注销、关机、重启事件，自动退出程序</li>
<li>窗口最小化时隐藏到托盘</li>
<li>单击托盘图标显示窗口</li>
<li>右键退出托盘图标时，自动退出程序</li>
</ol>
<p>解决问题：</p>
<ol>
<li><p>便携软件非正常（强制退出）时，下次启动报错。–XXX did not closed properly</p>
</li>
<li><p>部分软件没有最小化托盘的功能</p>
</li>
<li><p>便携软件默认开机启动会打开主界面</p>
</li>
</ol>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="comment">;=====================================================================</span></span><br><span class="line"><span class="comment">;                      AirExplorer Portable Tray</span></span><br><span class="line"><span class="comment">;                            Author:zzz</span></span><br><span class="line"><span class="comment">;                           date:2018-8-31</span></span><br><span class="line"><span class="comment">;             使用方法：将AHK放在AirExplorerPortable.exe目录中运行</span></span><br><span class="line"><span class="comment">;               理论上支持所有AirExplorer版本，包括以后发布的版本</span></span><br><span class="line"><span class="comment">;---------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#NoEnv  </span></span><br><span class="line">SendMode Input  </span><br><span class="line"><span class="built_in">SetWorkingDir %</span><span class="built_in">A_ScriptDir</span>%  </span><br><span class="line">DllCall(<span class="string">&quot;kernel32.dll\SetProcessShutdownParameters&quot;</span>, UInt, <span class="number">0</span>x4FF, UInt, <span class="number">0</span>)</span><br><span class="line"><span class="meta">#SingleInstance ignore</span></span><br><span class="line"><span class="comment">;设置脚本运行时托盘图标</span></span><br><span class="line"><span class="built_in">menu,</span>tray,icon,App\AppInfo\appicon.ico</span><br><span class="line"><span class="comment">;title must contain</span></span><br><span class="line"><span class="built_in">SetTitleMatchMode,</span> <span class="number">2</span></span><br><span class="line"><span class="comment">;启动便携软件</span></span><br><span class="line"><span class="built_in">Run,</span> AirExplorerPortable.exe</span><br><span class="line"><span class="comment">;等待便携软件启动成功</span></span><br><span class="line"><span class="built_in">WinWait,</span> <span class="keyword">ahk_exe</span> AirExplorer.exe</span><br><span class="line"><span class="comment">;WinMinimize, ahk_exe AirExplorer.exe</span></span><br><span class="line"><span class="comment">;便携软件启动成功后立即隐藏到托盘图标</span></span><br><span class="line"><span class="built_in">WinHide,</span> <span class="keyword">ahk_exe</span> Thunderbird.exe</span><br><span class="line"><span class="comment">;托盘程序右键退出时执行命令</span></span><br><span class="line"><span class="built_in">OnExit,</span> ExitSub</span><br><span class="line"><span class="comment">;检测便携软件窗口状态，最小化时自动隐藏到托盘</span></span><br><span class="line">OnMessage(<span class="number">0</span>x404, <span class="string">&quot;AHK_NOTIFYICON&quot;</span>)</span><br><span class="line"><span class="comment">;检测系统注销、关机、重启事件，响应并安全退出程序</span></span><br><span class="line">OnMessage(<span class="number">0</span>x11, <span class="string">&quot;WM_QUERYENDSESSION&quot;</span>)</span><br><span class="line"><span class="comment">;单击托盘图标，显示窗口</span></span><br><span class="line">AHK_NOTIFYICON(wParam, lParam)</span><br><span class="line">&#123;</span><br><span class="line">    if (lParam = <span class="number">0</span>x202) <span class="comment">; WM_LBUTTONUP</span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="built_in">		WinShow,</span> Air Explorer</span><br><span class="line"><span class="built_in">		WinActivate,</span> Air Explorer</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">;响应系统注销、关机、重启事件，正常退出程序</span></span><br><span class="line">WM_QUERYENDSESSION(wParam, lParam)</span><br><span class="line">&#123;</span><br><span class="line">  ENDSESSION_LOGOFF = <span class="number">0</span>x80000000</span><br><span class="line"><span class="built_in">  Process,</span>Close,AirExplorer.exe</span><br><span class="line"><span class="built_in">  Process,</span>WaitClose,AirExplorerPortable.exe</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ProcessExist(Name)&#123;</span><br><span class="line"><span class="built_in">	Process,</span>Exist,<span class="variable">%Name%</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Errorlevel</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">;检测程序窗口状态，并执行相应指令</span></span><br><span class="line">Loop</span><br><span class="line">&#123;</span><br><span class="line">	If !ProcessExist(<span class="string">&quot;AirExplorer.exe&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">ExitApp</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="built_in">	WinGet,</span> winState, MinMax, <span class="keyword">ahk_exe</span> AirExplorer.exe</span><br><span class="line">	if (winState = -<span class="number">1</span>) </span><br><span class="line">	&#123;</span><br><span class="line"><span class="built_in">		WinHide,</span> Air Explorer</span><br><span class="line">	&#125;   </span><br><span class="line">  sleep <span class="number">500</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">;右键托盘图标退出时执行的操作</span></span><br><span class="line"><span class="title">ExitSub:</span></span><br><span class="line"><span class="built_in">WinClose,</span> <span class="keyword">ahk_exe</span> AirExplorer.exe</span><br><span class="line"><span class="built_in">Process,</span>close,AirExplorer.exe</span><br><span class="line"><span class="keyword">ExitApp</span></span><br></pre></td></tr></table></figure>

<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul>
<li>2020-3-16：内容及排版调整</li>
<li>2018-8-31：AHK以及BAT代码讲解</li>
</ul>
]]></content>
      <tags>
        <tag>PortableApps</tag>
        <tag>开机后台自启</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓平板作为PC扩展屏幕</title>
    <url>/post/use-android-tablet-as-extended-display.html</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>有一台闲置的安卓的平板，想作为PC(Windows、MacOS)的扩展屏幕，有线和无线都能连接，在网上寻找到一些解决方法,使用结论如下：</p>
<ul>
<li>场景1：使用Windows，推荐spacedesk的有线模式</li>
<li>场景2：使用MacOS，推荐Twomon</li>
</ul>
<span id="more"></span> 

<h2 id="spacedesk"><a href="#spacedesk" class="headerlink" title="spacedesk"></a>spacedesk</h2><ul>
<li>官网: <a href="https://www.spacedesk.net/zh/">https://www.spacedesk.net/zh/</a></li>
<li>Server支持平台：Windows</li>
<li>Client支持平台：MacOS、Windows、Android、IOS、浏览器（HTML5）</li>
</ul>
<h2 id="Twomon"><a href="#Twomon" class="headerlink" title="Twomon"></a>Twomon</h2><p><img src="https://blog.ziiyc.com/images/776b4f30ad92249bc47cf7ab4063cf03_MD5.jpg" alt="use-android-tablet-as-extended-display-1.jpg"></p>
<ul>
<li>官网：<a href="http://www.easynlight.com/en/twomonusb/">http://www.easynlight.com/en/twomonusb/</a></li>
<li>支持的客户端：Mac,Win,Android,iOS，其中，Android和iOS端需要付费购买</li>
<li>安卓破解版：<a href="https://apk4free.net/twomon-usb-usb-monitor/">https://apk4free.net/twomon-usb-usb-monitor/</a></li>
<li>安卓端安装的版本为TwomonUSB，另外一个版本是TwomonAir（不建议用在平板和手机上，作为扩展屏幕延迟会很高）</li>
<li>测试结果：1080P输出的情况下，CPU占用在5%到40%之间浮动，不操作的情况下，CPU占用在5%到20%之间，内存超过200MB</li>
<li>其他功能：支持触屏（非常方便），鼠标响应速度很快。</li>
<li>存在问题：安卓破解版的需要核心破解才能使用。</li>
<li>结论：推荐使用</li>
</ul>
<h2 id="iDisplay"><a href="#iDisplay" class="headerlink" title="iDisplay"></a>iDisplay</h2><ul>
<li>官网：<a href="https://getidisplay.com/">https://getidisplay.com/</a></li>
<li>支持的客户端：Mac,Win,Android,iOS，其中，Android和iOS端需要付费购买</li>
<li>安卓破解版：<a href="https://apko.org/apps/idisplay-v4-3-0-apk/">https://apko.org/apps/idisplay-v4-3-0-apk/</a></li>
<li>注意：安卓版本连接Mac时仅支持无线方式。</li>
<li>测试结果：2K分辨率下，无线连接鼠标稍有卡顿，使用时不跟手，应该是无线原因导致的。</li>
<li>其他功能：支持触屏。显示还可以。</li>
<li>结论：如果的同时使用ipad和Mac,推荐使用。Android和Mac不推荐使用。</li>
</ul>
<h2 id="Wired-XDisplay"><a href="#Wired-XDisplay" class="headerlink" title="Wired XDisplay"></a>Wired XDisplay</h2><ul>
<li>官网：<a href="https://www.splashtop.com/wiredxdisplay">https://www.splashtop.com/wiredxdisplay</a></li>
<li>支持的客户端：Mac,Win,Android,iOS，其中，Android和iOS端需要付费购买</li>
<li>安卓破解版：<a href="https://apkdom.com/hl-cn/apk/221125-splashtop-wired-xdisplay-free-apk-1.0.0.10/">https://apkdom.com/hl-cn/apk/221125-splashtop-wired-xdisplay-free-apk-1.0.0.10/</a></li>
<li>连接方式：USB或者无线</li>
<li>测试结果：USB连接情况下，鼠标有些飘，能用，但体验一般。</li>
<li>结论：如果Twomon不能够使用的情况下（比如说安卓客户端打不开），可以考虑这种方案。</li>
</ul>
]]></content>
      <tags>
        <tag>效率工具</tag>
      </tags>
  </entry>
  <entry>
    <title>挂载网络硬盘为本地磁盘的方法总结</title>
    <url>/post/netdisk-mount.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时候需要挂载网络硬盘比如谷歌网盘、Dropbox、FTP为本地磁盘，体验了之后总结如下</p>
<span id="more"></span> 

<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="rclone-winfsp-开源免费"><a href="#rclone-winfsp-开源免费" class="headerlink" title="rclone + winfsp(开源免费)"></a>rclone + winfsp(开源免费)</h3><p>推荐指数：⭐️⭐️⭐️⭐️⭐️</p>
<h3 id="NetDrive-付费"><a href="#NetDrive-付费" class="headerlink" title="NetDrive(付费)"></a>NetDrive(付费)</h3><p>推荐指数：⭐️⭐️⭐️</p>
<p>NetDrive 2网上有破解版，使用体验不错，暂时没有便携版本。</p>
<p>NetDrive 3初次使用免费试用7天，过后需要付费，暂时没有便携版本。</p>
<h2 id="RaiDrive-免费，不开源"><a href="#RaiDrive-免费，不开源" class="headerlink" title="RaiDrive(免费，不开源)"></a>RaiDrive(免费，不开源)</h2><p>推荐指数：⭐️⭐️⭐️</p>
<p>英文界面，暂时没有便携版本。</p>
<h3 id="Total-Commander-付费"><a href="#Total-Commander-付费" class="headerlink" title="Total Commander(付费)"></a>Total Commander(付费)</h3><p>推荐指数：⭐️⭐️⭐️⭐️</p>
<p>需要安装插件：Cloud，WebDav</p>
<p>软件网上有破解便携版，可放置于U盘中使用。</p>
<h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><h3 id="方法一：Cloudmount-付费"><a href="#方法一：Cloudmount-付费" class="headerlink" title="方法一：Cloudmount(付费)"></a>方法一：Cloudmount(付费)</h3><p>推荐指数：⭐️⭐️⭐️⭐️</p>
<p>网上有破解版</p>
<h2 id="方法二：Cyberduck"><a href="#方法二：Cyberduck" class="headerlink" title="方法二：Cyberduck"></a>方法二：Cyberduck</h2><p>推荐指数：⭐️⭐️⭐️⭐️</p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="MixExplorer"><a href="#MixExplorer" class="headerlink" title="MixExplorer"></a>MixExplorer</h3><p>推荐指数：⭐️⭐️⭐️</p>
<h3 id="ES文件管理器"><a href="#ES文件管理器" class="headerlink" title="ES文件管理器"></a>ES文件管理器</h3><p>推荐指数：⭐️⭐️⭐️⭐️</p>
]]></content>
      <tags>
        <tag>效率工具</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode使用Github作为图床</title>
    <url>/post/vscode-use-github-as-pic-bed.html</url>
    <content><![CDATA[<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>使用VSCode插件PicGo上传图片至Github博客（比如kkzzhizho.github.io)的images分支。</p>
<h2 id="博客仓库原先状态"><a href="#博客仓库原先状态" class="headerlink" title="博客仓库原先状态"></a>博客仓库原先状态</h2><p>一共有两个分支：source（博客源文件）和master（Hexo博客生成文件)</p>
<span id="more"></span> 

<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="新建一个远程空白分支：images"><a href="#新建一个远程空白分支：images" class="headerlink" title="新建一个远程空白分支：images"></a>新建一个远程空白分支：images</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将项目克隆到本地</span></span><br><span class="line">git <span class="built_in">clone</span> xxx</span><br><span class="line"><span class="built_in">cd</span> xxx</span><br><span class="line"><span class="comment"># 新建一个空白images</span></span><br><span class="line">git checkout --orphan images</span><br><span class="line"><span class="comment"># 清空当前项目</span></span><br><span class="line">git <span class="built_in">rm</span> -rf .</span><br><span class="line"><span class="comment"># 新建一个README.md文件（因为分支文件为空时不能推送到远端）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a imgaes branch&quot;</span> &gt; README&gt;.md</span><br><span class="line"><span class="comment"># 提交到远端</span></span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;Initial images branch&quot;</span></span><br><span class="line">git push origin images</span><br></pre></td></tr></table></figure>

<h3 id="安装并配置VSCode插件：PicGo"><a href="#安装并配置VSCode插件：PicGo" class="headerlink" title="安装并配置VSCode插件：PicGo"></a>安装并配置VSCode插件：PicGo</h3><ol>
<li>安装PicGo插件</li>
</ol>
<p>需要用到Picgo这个插件，直接在vscode中搜索安装就行。</p>
<ol start="2">
<li>配置PicGo插件</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/eb70ad7545dc3a2b8a61fd144ca3aa2a_MD5.png" alt="vscode-use-github-as-pic-bed-1.png"></p>
<ol start="3">
<li>申请Github Token</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/9b0adcbebc5e660a712b937743aa0f17_MD5.png" alt="vscode-use-github-as-pic-bed-2.png"></p>
<p><img src="https://blog.ziiyc.com/images/79b9302ca83fcfa195c5084d23fd118b_MD5.png" alt="vscode-use-github-as-pic-bed-3.png"></p>
<p><img src="https://blog.ziiyc.com/images/0f0574f5d08dd599be1bd75f3918f85c_MD5.png" alt="vscode-use-github-as-pic-bed-4.png"></p>
<p><img src="https://blog.ziiyc.com/images/852282b79f9ff8b204e1a088a0a0d4f4_MD5.png" alt="vscode-use-github-as-pic-bed-5.png"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>打造Windows+Mac OS X+Ubuntu+WinPE的Windows To Go维护U盘</title>
    <url>/post/multiboot-wtg.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://blog.ziiyc.com/images/9968379376d4ba9bc8a5f9fd17bd24cd_MD5.png" alt="multiboot-wtg-1.png"></p>
<p>作为一个极客，随便带一个维护PE的U盘是必需的。然而在很多时候，仅仅有一个PE，难以完成复杂的需求。我手头上有一个128G的Windows To Go U盘，想为别人安装Ubuntu时，必须要拿另外一个U盘全盘格式化后写入，麻烦，而且也浪费资源。所以这次写一篇关于U盘多启动的文章，实现标题的中效果。</p>
<span id="more"></span>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>  你得有一个不小于64GB的Windows To Go U盘。<br>  使用到的软件：</p>
<ol>
<li>DiskGenius(或PartitionGuru)</li>
<li>UEFI启动修复工具</li>
<li>XYplorer</li>
<li>Vmware Pro</li>
<li>Bootice</li>
<li>Dism++</li>
</ol>
<p>  使用到的镜像：</p>
<ol>
<li>Ubuntu 16.04.3安装镜像</li>
<li>Mac OS X 13.1安装镜像(dmg格式)</li>
<li>微PE</li>
<li>Windows 10 1709企业版镜像</li>
</ol>
<h2 id="开始折腾"><a href="#开始折腾" class="headerlink" title="开始折腾"></a>开始折腾</h2><ol>
<li>这次使用到的启动方式为GPT+EFI（使用PartitionGuru软件进行操作）。如果对启动方式不了解，在这里简单的科普一下，有两种启动方式，一种是BIOS+MBR，一种是GPT+EFI，前者复杂，后者简单。</li>
<li>进行分区操作，350MB的EFI（ESP）启动分区，5.5GB的FAT32分区（只是暂时，稍后需要在苹果系统中格式化为HFS+分区），2GB的FAT32分区用于放Ubuntu 16.04.3的安装镜像，500MB的FAT32分区用于PE（只装一个PE的话600MB即可），以及最后10的空间格式化为NTFS分区用于Windows To Go的系统及软件。<br>PS:<strong>前四个分区设置了隐藏，在电脑中不可见，不然一插进电脑就出来5个盘，不美观也不实用。</strong></li>
</ol>
<p><img src="https://blog.ziiyc.com/images/a8bf90fbdd0be76dba6b0f756b3bd456_MD5.png" alt="multiboot-wtg-2.png"></p>
<h2 id="EFI分区"><a href="#EFI分区" class="headerlink" title="EFI分区"></a>EFI分区</h2><p>这个分区的用途是用于搜索和引导其他分区上的安装镜像和系统。 使用到的引导管理工具为rEFInd（主要）和Clover（黑苹果安装辅助）。关于引导管理工具的使用，这里只简单提一点：开机时进入的EFI文件是在/EFI/Boot/下。</p>
<p><img src="https://blog.ziiyc.com/images/6277bab48977f80908f414e38d161359_MD5.png" alt="multiboot-wtg-3.png"></p>
<h2 id="写入苹果安装镜像"><a href="#写入苹果安装镜像" class="headerlink" title="写入苹果安装镜像"></a>写入苹果安装镜像</h2><p>在虚拟机中安装苹果操作系统，具体的操作见<a href="http://www.jianshu.com/p/25d2d781bd98">简书-Hegel_SU</a>的文章。</p>
<p><img src="https://blog.ziiyc.com/images/7612fa857db49fa7211242430311a323_MD5.png" alt="multiboot-wtg-4.png"></p>
<p>打开苹果的操作系统，插入U盘，磁盘工具，将5.5GB的FAT32分区格式化为HFS+分区。之后用命令行写入苹果镜像。</p>
<p><img src="https://blog.ziiyc.com/images/5789e676abeae27ed7f5eb12807587e3_MD5.jpg" alt="multiboot-wtg-5.jpg"></p>
<p>命令行写入苹果DMG镜像教程：<a href="https://www.iplaysoft.com/macos-usb-install-drive.html">iplaysoft</a></p>
<p><img src="https://blog.ziiyc.com/images/d01f3da9450e75f59c9ccbc8763663df_MD5.jpg" alt="multiboot-wtg-6.jpg"></p>
<h2 id="写入Ubuntu系统镜像"><a href="#写入Ubuntu系统镜像" class="headerlink" title="写入Ubuntu系统镜像"></a>写入Ubuntu系统镜像</h2><p>将安装镜像解压至2GB的FAT32分区中，同时删除该分区目录/EFI/Boot/Bootx64.EFI即可</p>
<p><img src="https://blog.ziiyc.com/images/8ecdd4d6c9e14e19a8ee061ad7327cc4_MD5.png" alt="multiboot-wtg-7.png"></p>
<h2 id="写入微PE工具箱"><a href="#写入微PE工具箱" class="headerlink" title="写入微PE工具箱"></a>写入微PE工具箱</h2><p>准备另一个8GB的文章，打开微PE工具箱写入程序，选择方案二：UEFI/Legacy全能双分区方式，写入后在隐藏的引导分区中提取WEPE64.WIM，WEPE64.SDI和引导文件/EFI/Microsoft下的文件到500MB的FAT32分区中。</p>
<p><img src="https://blog.ziiyc.com/images/01248a0ccf9671579c21045b963b66c3_MD5.png" alt="multiboot-wtg-8.png"></p>
<p><img src="https://blog.ziiyc.com/images/251aab4dc6226672dc74b683711fec0a_MD5.png" alt="multiboot-wtg-9.png"></p>
<h2 id="安装完整的Windows-to-go-Win10系统"><a href="#安装完整的Windows-to-go-Win10系统" class="headerlink" title="安装完整的Windows to go-Win10系统"></a>安装完整的Windows to go-Win10系统</h2><p>在Windows下创建一个VHD文件（建议20GB）放到最后一个分区NTFS中，（科普一下，VHD指的是Vitual Hard Disk即虚拟硬盘文件），挂载VHD后在DiskGenius中格式化VHD文件，然后用Dism++以Windows To Go方式写入Windows 10的系统镜像，之后在U盘的EFI分区中，用Bootice修复Windows 10的引导。</p>
<p><img src="https://blog.ziiyc.com/images/65c703b134b99cf05815a49f664f9bcd_MD5.png" alt="multiboot-wtg-10.png"></p>
<p><img src="https://blog.ziiyc.com/images/ca38f69a14fd7134ad9ac62121234fd3_MD5.png" alt="multiboot-wtg-11.png"></p>
<p><img src="https://blog.ziiyc.com/images/aee7163e07392a3317f0d2609d0470ad_MD5.png" alt="multiboot-wtg-12.png"></p>
<p><img src="https://blog.ziiyc.com/images/a011d34e1f70c09456aa9ec279371f74_MD5.png" alt="multiboot-wtg-13.png"></p>
<p><img src="https://blog.ziiyc.com/images/7cf4f918911d5f7f92c5995cbe511571_MD5.png" alt="multiboot-wtg-14.png"></p>
<p><img src="https://blog.ziiyc.com/images/4a303fddf17afea2fcfcd191b144114b_MD5.png" alt="multiboot-wtg-15.png"></p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>至此，一个多功能U盘打造完成，前前后后折腾了两天多，茶不思饭不想，如果你也非常想要达到这样的目的，请做好心想准备，过程将会非常的闹心,Good luck。</p>
]]></content>
      <tags>
        <tag>多功能U盘</tag>
      </tags>
  </entry>
  <entry>
    <title>折腾Ubuntu 16.04，从美化到常用软件安装</title>
    <url>/post/ubuntu-desktop.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>根据2018年2月桌面操作系统市场占比(下图)，Linux虽拥有众多桌面版本分支，如Ubuntu，Deepin，Kubuntu等，却仅仅占桌面操作系统全球市场份额的1.46%。</p>
<p>这其中原因有很多，对于个人的选择来说，影响最大是两个因素，一是使用界面，二是软件数量和质量。</p>
<p>这篇文章针对我个人的使用情况，解决从美化到软件安装的各种需求。</p>
<p><img src="https://blog.ziiyc.com/images/194558ea97895178027b5de3bed2a3f3_MD5.jpg" alt="ubuntu-desktop.jpg"></p>
<span id="more"></span> 

<h2 id="系统美化"><a href="#系统美化" class="headerlink" title="系统美化"></a>系统美化</h2><h3 id="安装主题：Arc-GTK"><a href="#安装主题：Arc-GTK" class="headerlink" title="安装主题：Arc GTK"></a>安装主题：Arc GTK</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&quot;echo &#x27;deb http://download.opensuse.org/repositories/home:/Horst3180/xUbuntu_16.04/ /&#x27; &gt;&gt; /etc/apt/sources.list.d/arc-theme.list&quot;</span></span><br><span class="line">wget http://download.opensuse.org/repositories/home:Horst3180/xUbuntu_16.04/Release.key</span><br><span class="line">sudo apt-key add - &lt; Release.key</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install arc-theme</span><br></pre></td></tr></table></figure>

<h3 id="安装图标：papirus-icon-theme-gtk"><a href="#安装图标：papirus-icon-theme-gtk" class="headerlink" title="安装图标：papirus-icon-theme-gtk"></a>安装图标：papirus-icon-theme-gtk</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:varlesh-l/papirus-pack</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install papirus-gtk-icon-theme</span><br></pre></td></tr></table></figure>

<h3 id="应用主题图标：Unity-Tweak-Tool"><a href="#应用主题图标：Unity-Tweak-Tool" class="headerlink" title="应用主题图标：Unity-Tweak-Tool"></a>应用主题图标：Unity-Tweak-Tool</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install Unity-Tweak-Tool</span><br></pre></td></tr></table></figure>

<h2 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h2><p>不喜欢Ubuntu Gnome桌面，比较喜欢Unity桌面，对于我当前使用的软件来说兼容性相当好。</p>
<h3 id="运行Windows软件：deepin-wine-ubuntu"><a href="#运行Windows软件：deepin-wine-ubuntu" class="headerlink" title="运行Windows软件：deepin-wine-ubuntu"></a>运行Windows软件：<a href="https://github.com/wszqkzqk/deepin-wine-ubuntu">deepin-wine-ubuntu</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git deepin-wine-ubuntu</span><br><span class="line"><span class="built_in">cd</span> deepin-wine-ubuntu</span><br><span class="line"><span class="built_in">chmod</span> +x ./install</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<p>可解决下列日常软件安装需求：</p>
<ul>
<li><p>QQ</p>
</li>
<li><p>微信</p>
</li>
<li><p>百度网盘</p>
</li>
<li><p>WinRAR</p>
</li>
<li><p>迅雷极速版</p>
</li>
<li><p>阿里旺旺</p>
</li>
</ul>
<h3 id="全局搜索：Albert"><a href="#全局搜索：Albert" class="headerlink" title="全局搜索：Albert"></a>全局搜索：Albert</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:nilarimogard/webupd8</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install albert</span><br></pre></td></tr></table></figure>



<h3 id="网络工具：electron-ssr"><a href="#网络工具：electron-ssr" class="headerlink" title="网络工具：electron-ssr"></a>网络工具：<a href="https://github.com/erguotou520/electron-ssr/releases">electron-ssr</a></h3><h3 id="音乐播放器：网易云音乐"><a href="#音乐播放器：网易云音乐" class="headerlink" title="音乐播放器：网易云音乐"></a>音乐播放器：<a href="https://music.163.com/#/download">网易云音乐</a></h3><h3 id="浏览器：Chrome"><a href="#浏览器：Chrome" class="headerlink" title="浏览器：Chrome"></a>浏览器：<a href="https://www.google.com/intl/zh-CN_ALL/chrome/">Chrome</a></h3><h3 id="输入法：Fictx-可安装五笔输入法"><a href="#输入法：Fictx-可安装五笔输入法" class="headerlink" title="输入法：Fictx(可安装五笔输入法)"></a>输入法：Fictx(可安装五笔输入法)</h3><p>系统自带，安装五笔输入法方式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install fcitx-table-wubi</span><br></pre></td></tr></table></figure>



<h3 id="Markdown写作：Typora"><a href="#Markdown写作：Typora" class="headerlink" title="Markdown写作：Typora"></a>Markdown写作：<a href="https://typora.io/#download">Typora</a></h3><h3 id="代码编辑：Sublime-Text-3"><a href="#代码编辑：Sublime-Text-3" class="headerlink" title="代码编辑：Sublime Text 3"></a>代码编辑：<a href="https://www.sublimetext.com/3">Sublime Text 3</a></h3><h3 id="下载工具：uGET"><a href="#下载工具：uGET" class="headerlink" title="下载工具：uGET"></a>下载工具：uGET</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install uget</span><br></pre></td></tr></table></figure>



<h3 id="剪贴板增强：copyq"><a href="#剪贴板增强：copyq" class="headerlink" title="剪贴板增强：copyq"></a>剪贴板增强：copyq</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hluk/copyq</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install copyq</span><br></pre></td></tr></table></figure>



<h3 id="邮件，日历，联系人，任务：Thunderbird"><a href="#邮件，日历，联系人，任务：Thunderbird" class="headerlink" title="邮件，日历，联系人，任务：Thunderbird"></a>邮件，日历，联系人，任务：Thunderbird</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install thunderbird</span><br></pre></td></tr></table></figure>



<h3 id="截图工具：Shutter"><a href="#截图工具：Shutter" class="headerlink" title="截图工具：Shutter"></a>截图工具：Shutter</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install thunderbird</span><br></pre></td></tr></table></figure>



<h3 id="虚拟机：VMware-Workstation"><a href="#虚拟机：VMware-Workstation" class="headerlink" title="虚拟机：VMware Workstation"></a>虚拟机：VMware Workstation</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载最新版VMware Workstation：</span></span><br><span class="line">wget https://www.vmware.com/go/getworkstation-linux</span><br><span class="line"><span class="comment"># 增加可以执行权限并执行</span></span><br><span class="line"><span class="built_in">chmod</span> +x getworkstation-linux</span><br><span class="line">sudo ./getworkstation-linux</span><br><span class="line"><span class="comment"># 之后进入图形安装界面</span></span><br></pre></td></tr></table></figure>

<h4 id="安装过程报错：无法在模块路径中找到主题引擎：“murrine”，解决方法"><a href="#安装过程报错：无法在模块路径中找到主题引擎：“murrine”，解决方法" class="headerlink" title="安装过程报错：无法在模块路径中找到主题引擎：“murrine”，解决方法"></a>安装过程报错：无法在模块路径中找到主题引擎：“murrine”，<a href="https://blog.csdn.net/yzf0011/article/details/75215609?locationNum=10&fps=1">解决方法</a></h4><h3 id="系统备份还原：TimeShift"><a href="#系统备份还原：TimeShift" class="headerlink" title="系统备份还原：TimeShift"></a>系统备份还原：TimeShift</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository -y ppa:teejee2008/ppa</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install timeshift</span><br></pre></td></tr></table></figure>



<h3 id="硬盘分区工具：Gparted"><a href="#硬盘分区工具：Gparted" class="headerlink" title="硬盘分区工具：Gparted"></a>硬盘分区工具：Gparted</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gparted</span><br></pre></td></tr></table></figure>



<h3 id="文件-文件夹比较工具：meld"><a href="#文件-文件夹比较工具：meld" class="headerlink" title="文件/文件夹比较工具：meld"></a>文件/文件夹比较工具：meld</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install meld</span><br></pre></td></tr></table></figure>



<h3 id="办公软件：WPS-Office"><a href="#办公软件：WPS-Office" class="headerlink" title="办公软件：WPS Office"></a>办公软件：<a href="http://wps-community.org/downloads">WPS Office</a></h3><h3 id="状态栏显示天气：优客天气"><a href="#状态栏显示天气：优客天气" class="headerlink" title="状态栏显示天气：优客天气"></a>状态栏显示天气：<a href="http://www.ubuntukylin.com/application/show.php?lang=cn&id=270">优客天气</a></h3><h3 id="启动项管理：gnome-session-properties（系统自带）"><a href="#启动项管理：gnome-session-properties（系统自带）" class="headerlink" title="启动项管理：gnome-session-properties（系统自带）"></a>启动项管理：gnome-session-properties（系统自带）</h3><h3 id="状态栏显示网速：indicator-netspeed-unity"><a href="#状态栏显示网速：indicator-netspeed-unity" class="headerlink" title="状态栏显示网速：indicator-netspeed-unity"></a>状态栏显示网速：indicator-netspeed-unity</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:fixnix/netspeed</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install indicator-netspeed-unity</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">indicator-netspeed-unity &amp;</span><br></pre></td></tr></table></figure>

<h3 id="阻止系统休眠：Caffeine"><a href="#阻止系统休眠：Caffeine" class="headerlink" title="阻止系统休眠：Caffeine"></a>阻止系统休眠：Caffeine</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:caffeine-developers/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install caffeine</span><br></pre></td></tr></table></figure>

<h2 id="系统自定义设置"><a href="#系统自定义设置" class="headerlink" title="系统自定义设置"></a>系统自定义设置</h2><h3 id="取消输入sudo需要密码"><a href="#取消输入sudo需要密码" class="headerlink" title="取消输入sudo需要密码"></a>取消输入sudo需要密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/sudoers</span><br><span class="line"><span class="comment"># 只要在%sudo ALL=(ALL:ALL) ALL下面添加一行</span></span><br><span class="line">username  ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>

<h3 id="tty终端显示中文"><a href="#tty终端显示中文" class="headerlink" title="tty终端显示中文"></a>tty终端显示中文</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先安装fbterm</span></span><br><span class="line">sudo apt-get install fbterm</span><br><span class="line"></span><br><span class="line">sudo gpasswd -a YOUR_USERNAME video</span><br><span class="line">sudo <span class="built_in">setcap</span> <span class="string">&#x27;cap_sys_tty_config+ep&#x27;</span> /usr/bin/fbterm</span><br><span class="line"><span class="comment"># 修改.profile，并添加以下内容</span></span><br><span class="line">vi ~/.profile</span><br><span class="line"><span class="comment"># 如果在tty下就执行fbtrem</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> = <span class="string">&quot;linux&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># exec fbterm</span></span><br><span class="line">  LC_CTYPE=zh_CN.UTF-8 <span class="built_in">exec</span> fbterm</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>桌面系统</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐跨平台PDF,网页标注-Weave</title>
    <url>/post/weave.html</url>
    <content><![CDATA[<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul>
<li>安卓平板（电容屏）</li>
<li>Yandex浏览器（从Google Play下载，需科学上网）</li>
<li>Weava Highlighter（从Chrome Webstore下载安装，需科学上网）</li>
<li>电容笔（主动式体验更好些，更接近笔的体验，需要充电）</li>
</ul>
<span id="more"></span> 

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="网页文字颜色标注"><a href="#网页文字颜色标注" class="headerlink" title="网页文字颜色标注"></a>网页文字颜色标注</h3><ul>
<li>选中一段文字，这时候并不会出现Weava的标注工具</li>
<li>在网页任意位置滑动就会出现标注工具，如下图所示</li>
</ul>
<p><img src="https://blog.ziiyc.com/images/971af1811e08020c2dba0c9d686aa49f_MD5.jpg" alt="weave-1.jpg"></p>
<h3 id="标注和浏览器菜单重叠的解决方法"><a href="#标注和浏览器菜单重叠的解决方法" class="headerlink" title="标注和浏览器菜单重叠的解决方法"></a>标注和浏览器菜单重叠的解决方法</h3><ul>
<li>在出现标注工具后，将页面向上滑动即可，如下图所示</li>
</ul>
<p><img src="https://blog.ziiyc.com/images/788b2f6bf7a68dc875f2c1358d46699f_MD5.jpg" alt="weave-2.jpg"></p>
<h3 id="网页文字添加注释"><a href="#网页文字添加注释" class="headerlink" title="网页文字添加注释"></a>网页文字添加注释</h3><ul>
<li>在颜色标注后，只需要再次点击该文字就会出现添加注释，如下图所示</li>
</ul>
<p><img src="https://blog.ziiyc.com/images/ae9222e997225cbc850c6b5b85ee465a_MD5.jpg" alt="weave-3.jpg"></p>
<h3 id="为不同的颜色添加颜色注释"><a href="#为不同的颜色添加颜色注释" class="headerlink" title="为不同的颜色添加颜色注释"></a>为不同的颜色添加颜色注释</h3><ul>
<li>在文字标注界面选择设置按钮即可</li>
</ul>
<p><img src="https://blog.ziiyc.com/images/880f86959fc6a99d10ce8a166186cd17_MD5.jpg" alt="weave-4.jpg"></p>
<h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><p><img src="https://blog.ziiyc.com/images/40018c0939daf487454facb3ea67db76_MD5.jpg" alt="weave-5.jpg"></p>
<p><img src="https://blog.ziiyc.com/images/67f96193ffab6e3e3f01a7899ff8eb19_MD5.jpg" alt="weave-6.jpg"></p>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>阅读辅助</tag>
      </tags>
  </entry>
  <entry>
    <title>用Auto Scaling进行网站压测</title>
    <url>/post/use-auto-scaling-to-pressure-test.html</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>使用自动化程序模拟用户下单，对SaaS建站前端Web界面进行压力测试</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul>
<li>在EC2提供的Auto Scaling</li>
<li>自动化程序运行环境：Windows Server 2019</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li>制作线上仿真环境：从rds快照中新建实例用于仿真数据库，同时redis也是同样的操作</li>
<li>制作Windows Server 2019程序镜像，将程序打包在系统镜像中（IAM)，并配置开机自启动</li>
</ul>
<span id="more"></span> 

<h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取auto scaling实例</span></span><br><span class="line">ids=<span class="variable">$</span>(aws autoscaling describe<span class="literal">-auto-scaling-instances</span> | jq <span class="literal">-r</span> .AutoScalingInstances[].InstanceId)</span><br><span class="line"><span class="comment"># 获取auto scaling实例IP</span></span><br><span class="line"><span class="keyword">for</span> id <span class="keyword">in</span> <span class="variable">$</span>&#123;ids[<span class="selector-tag">@</span>]&#125;;<span class="keyword">do</span> aws ec2 describe<span class="literal">-instances</span> <span class="literal">--instance-ids</span> <span class="variable">$id</span> | grep PrivateIpAddress  | head <span class="literal">-1</span> | awk <span class="operator">-F</span> <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | sed <span class="string">&#x27;s/[&quot;, ]//g&#x27;</span>; done &gt;&gt; ids.txt</span><br><span class="line"><span class="comment"># 生成rdp文件</span></span><br><span class="line">IFS=<span class="variable">$</span><span class="string">&#x27;\n&#x27;</span>;<span class="keyword">for</span> ip <span class="keyword">in</span> `cat ids.txt`;<span class="keyword">do</span> <span class="built_in">rm</span> <span class="operator">-f</span> rdps/<span class="variable">$ip</span>.rdp &amp;&amp; <span class="built_in">cp</span> <span class="operator">-f</span> template.rdp rdps/<span class="variable">$ip</span>.rdp &amp;&amp; dos2unix <span class="operator">-f</span> rdps/<span class="variable">$ip</span>.rdp &amp;&amp; sed <span class="literal">-i</span> <span class="string">&quot;s/LANIP/<span class="variable">$ip</span>/g&quot;</span> rdps/<span class="variable">$ip</span>.rdp;done</span><br><span class="line"><span class="comment"># 查看windows session</span></span><br><span class="line">query session</span><br><span class="line"><span class="comment"># 查看任务和session</span></span><br><span class="line">tasklist</span><br><span class="line"><span class="comment"># 查看服务</span></span><br><span class="line"><span class="built_in">get-service</span></span><br></pre></td></tr></table></figure>

<h1 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h1><h2 id="Java写的自动化程序不能实现开机自启动"><a href="#Java写的自动化程序不能实现开机自启动" class="headerlink" title="Java写的自动化程序不能实现开机自启动"></a>Java写的自动化程序不能实现开机自启动</h2><p>报错如下：</p>
<p>org.openqa.selenium.remote.UnreachableBrowserException: Error communicating with the remote browser. It may have died.</p>
<p>解决思路：</p>
<ul>
<li>配置开机自动登录Windows账户：<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-server/user-profiles-and-logon/turn-on-automatic-logon">https://docs.microsoft.com/en-us/troubleshoot/windows-server/user-profiles-and-logon/turn-on-automatic-logon</a></li>
<li>使用AlwaysUp自动拉起程序</li>
<li>配置重启脚本：自动杀死chrome.exe和chromedriver.exe</li>
<li>批量生成远程桌面连接文件<ul>
<li>配置不检查Hostkey</li>
<li>信任未知发行者</li>
<li>启动后最小化</li>
</ul>
</li>
<li>批量连接rdp远程桌面，一次最多可以连接15个rdp文件</li>
</ul>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>解决使用第三方输入法在LaunchPad中无法切换中英文</title>
    <url>/post/launchpad-inputmethord-switch-problem.html</url>
    <content><![CDATA[<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul>
<li>2018年09月02日：利用Keyboard Maestro解决问题</li>
</ul>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>第三方输入法（如搜狗拼音输入法，清歌五笔输入法等）在Launchpad中无法使用Shift按键切换中英文输入，而是在Launchpad中显示烦人的输入框。</p>
<span id="more"></span> 

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li>在Keyboard Maestro中新建一个Macros</li>
<li>触发方式设置为Hot Key Trigger，条件为打开Launchpad的快捷键</li>
<li>程序如下图所示</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/8e9c3a066fe27aed824cbcbd21c455bd_MD5.jpg" alt="launchpad-inputmethord-switch-problem-1.jpg"></p>
<p>本文到此结束。</p>
]]></content>
      <tags>
        <tag>MacOS_Bug</tag>
        <tag>Keyboard Maestro应用</tag>
      </tags>
  </entry>
  <entry>
    <title>百度网盘高速下载方法（不定期更新）</title>
    <url>/post/baidunetdisk-speed-crack.html</url>
    <content><![CDATA[<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>由网友”软件小妹”制作的网盘助手脚本，原理是通过显示百度网盘下载直链，</p>
<p>使用方法：</p>
<ul>
<li>浏览器安装Tampermonkey或者VolientMonkey</li>
<li>打开链接<a href="https://greasyfork.org/zh-CN/scripts/418182-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%AE%80%E6%98%93%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%A4%8D%E6%B4%BB%E7%89%88">百度网盘简易下载助手（直链下载复活版）</a>,安装脚本</li>
<li>登录你的百度网盘帐号。</li>
<li>选择要下载的文件，点击页面里的 “简易下载助手” 。</li>
<li>点击获取直链下载链接，然后使用 IDM 或者 Aria2 这类多线程下载软件来加速下载。</li>
</ul>
<p>注意事项：</p>
<ul>
<li>不支持「文件夹」和「多文件压缩包」下载</li>
<li>只适合少量下载</li>
</ul>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>网盘助手（测试效果不行，也有可能我配置有误）</p>
<p>使用方法：</p>
<ul>
<li>浏览器安装Tampermonkey Beta版</li>
<li>打开官网按教程进行配置：<a href="https://www.baiduyun.wiki/">https://www.baiduyun.wiki/</a></li>
</ul>
<span id="more"></span> 





]]></content>
      <tags>
        <tag>百度网盘</tag>
      </tags>
  </entry>
  <entry>
    <title>解决谷歌日历提醒Bug：日历找不到请求的活动</title>
    <url>/post/google-calendar-bug.html</url>
    <content><![CDATA[<h2 id="bug描述"><a href="#bug描述" class="headerlink" title="bug描述"></a>bug描述</h2><p>今天解决一件非常恼人的问题，问题删除谷歌日历中的提醒，提醒日历找不到请求的活动。如图所示，在手机无法删除。</p>
<span id="more"></span>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li>登录网页版<a href="https://calendar.google.com/">谷歌日历</a>，</li>
<li>在左栏的我的日历，设置Tasks，切换到“提醒”，然后在网页端将提醒删除即可。如图：</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/6892119e084d85c98dbabff8a0b11bc1_MD5.jpg" alt="google-calendar-bug-1.jpg"></p>
<ol start="3">
<li>手机再同步一次，提醒就消失了。</li>
</ol>
]]></content>
      <tags>
        <tag>谷歌日历</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>黑苹果HD5500开机第二屏花屏解决方案</title>
    <url>/post/hackintosh-hd5500-screen-flickering.html</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我的电脑是i5-5200U(HD5500),注入的ID为16260006。每次开机第二屏就会闪屏，8个苹果。</p>
<ol>
<li>在开启CSM兼容模式时，开机第二屏会8个苹果一闪而过，不影响正常使用，但看着很烦。</li>
<li>在关闭CSM兼容模式时，即纯UEFI模式时，开机直接花屏，屏幕分为15个竖直片段，显示很模糊。进入系统后，按睡眠后唤醒就正常。或者合盖后打开，显示正常。</li>
</ol>
<span id="more"></span> 

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li>打开Clover\Graphics,勾选Inject Intel,并注入ID:16260006，</li>
<li>现时在Clover\Graphics勾选注入EDID(下面提取修改的EDID)。</li>
</ol>
<h2 id="如何提取EDID"><a href="#如何提取EDID" class="headerlink" title="如何提取EDID"></a>如何提取EDID</h2><p>我的屏幕是LG 1080P屏幕。在Windows下，使用<a href="https://pan.baidu.com/s/1sl0purF">Deltacast EDID</a>提取EDID.</p>
<ol>
<li>从注册表中导入EDID</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/b773a88cdb3df0ae8100c51bcd291041_MD5.png" alt="hackintosh-hd5500-screen-flickering-1.png"></p>
<p><img src="https://blog.ziiyc.com/images/96a4e88b83b99c1f2d34691474f73fb2_MD5.png" alt="hackintosh-hd5500-screen-flickering-2.png"></p>
<ol>
<li>这里改水平同步宽度，我显示器是32，改为100就解决了8个苹果登录花屏的问题。如果你的显示器是100，就改为32试试。</li>
</ol>
<p><img src="https://blog.ziiyc.com/images/7e6f45c35fd5be8094578a835054ab8f_MD5.png" alt="hackintosh-hd5500-screen-flickering-3.png"></p>
]]></content>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
</search>
